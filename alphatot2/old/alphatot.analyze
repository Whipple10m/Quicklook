#pal MACRO alphatot
#pal *
#pal * JB 950720
#pal *
#pal * exec alphatot [sourcename] [mode] [datafile, ...]
#pal *
#pal *           sourcename       String with no blanks containing source name
#pal *           mode             0 - use chains in pawon.kumac, pawoff.kumac
#pal *                                1 - build chains w/ cmd line args
#pal *           datafile         Data filename in the format gt????
#pal *                                give first filename even if creating chain
#pal *                               
#pal * Revision History (incomplete):
#pal *
#pal * JB 950715
#pal * Expanded version of JQ's alphatime.kumac, to accumulate results of 2-d
#pal * analysis, and display ON-OFF pedestal variances for a pointing check.
#pal *
#pal * JQ 950630 
#pal * PAW script which cuts parameterised .rz files(pairs only, no tracking)
#pal * Based on Jim Buckley's alphatot.kumac but with severeal differences-
#pal * mainly the use of selectyion functions and duration matching.
#pal * The script matches durations carefully, but is slow as this requires 2
#pal * passes through the ntuple chain. The run-by-run durations are calculated
#pal * for each on/off pair and each pair is cut to the smaller of that pair.
#pal * Requires pawon and pawoff kumacs which generate chains and return into
#pal * vectors inonn and inoff the number of pairs. The selection function
#pal * for the first pass is durations.f and for the second pass is cut_time.f
#pal * Modified (JQ 950704) so that it uses selection functions from the directory
#pal * /data5/quinn/paw/uwfunc/analyse3 and this directory is pointed to by 
#pal * the variable [comisdir]
#pal *
#pal *
#pal comisdir='/usr/local/whipple/prog/alphatot/'    |Home dir for sel. funcs.
#pal dbdir='/home/dbgt/pgvec/'
#pal *
#pal ************************************************************************
#pal * Edit the following block of code to change cuts, on/off alpha        *
#pal * ratio etc.
#pal *
#pal * Define cuts (note if any new cuts are added or any are removed then the 
#pal * cut selection function (in directory [comisdir]) cut_time.f, the comis
#pal * routine for writing the start of the pawtab.out file and routine which
#pal * prints the text on the picture (in this macro) must also be edited.
#pal *
#pal * vec/cre dist(2) r 0.51 1.1
#pal vec/cre dist(2) r 0.51 1.0
#pal vec/cre width(2) r 0.073 0.15
#pal vec/cre length(2) r 0.16 0.3
#pal vec/cre size(1) r 400.           |cut to size > this value.
#pal * vec/cre trig(2) r 45. 45.
#pal vec/cre trig(2) r 100. 80.
#pal vec/cre nbr3(1) r 0.5            | >0 means this cut is 'on'
#pal vec/cre alpha(1) r 10.           |in degrees.
#pal vec/cre offal(2) r 15. 65.
#pal *
#pal vec/cre roffon(1) r 5.26	 | OFF/ON alpha ratio
#pal vec/cre efarea(1) r 3.5          | Effective area [x 10^8 cm^2]
#pal *                                                                      *
#pal ************************************************************************
#pal *
#pal sigma sinalp=sin(alpha(1)*pi/180)
#pal vec/cre offsa(2) r $sigma(sin(offal(1)*pi/180)) $sigma(sin(offal(2)*pi/180))
#pal *
#pal vec/cre cv(13) r dist(1) dist(2) width(1) width(2) length(1) length(2) _
#pal 	size(1) trig(1) trig(2) nbr3(1) sinalp(1) offsa(1) offsa(2)
#pal *
#pal cut1=$eval(dist(1))"L# Distance "L#$eval(dist(2))
#pal cut2=$eval(width(1))"L# Width "L#$eval(width(2))
#pal cut3=$eval(length(1))"L# Length "L#$eval(Length(2))
#pal cut4=Size "G#$eval(size(1))
#pal cut5=1/91"G#$eval(trig(1)), 2/91"G#$eval(trig(2))
#pal cut6=Nbr3 "G#$eval(nbr3(1))
#pal cut7=[a]"L#$eval(alpha(1))^o!
#pal cut8=$eval(offal(1))"L#[a]"L#$eval(offal(2))^o!
#pal *
#pal opt nbox            | no box around plot
#pal opt a4
#pal opt linx
#pal opt liny
#pal set mtyp 1          | marker type
#pal set xlab 1.5        | dist label to y-axis (default = 1.4)
#pal set asiz 0.28	    | axis label size (default = 0.28)
#pal set XMGL 3.0        | Margins (defualt = 2.0)	
#pal set XMGR 2.0
#pal set YMGL 2.0
#pal set YMGU 3.0
#pal opt linx
#pal opt liny
#pal opt nsta
#pal set HTYP 0
#pal * zon 2 3 
#pal zon 2 3
#pal h/del *
#pal *
#pal for/file 1 'cuton.tmp' 
#pal for/file 2 'cutoff.tmp'
#pal vec/cre non(1) i 0        | no. of on runs.
#pal vec/cre noff(1) i 0       | no. of off runs.
#pal *
#pal vec/cr xr(109) R
#pal vec/cr yr(109) R
#pal vec/cr ped(109) R
#pal vec/cr pedvar(109) R
#pal vec/cr dped(109) R
#pal vec/cr gain(109) R
#pal vec/cr meanpv(1) R	| mean ped. variance
#pal *
#pal * Define vectors to store results from the COMIS function
#pal * ulcomis.f
#pal *
#pal vec/cr sigoo(1) R
#pal vec/cr uloo(1) R
#pal vec/cr rateoo(1) R
#pal vec/cr fluxoo(1) R
#pal vec/cr ulfloo(1) R
#pal vec/cr sigtr(1) R
#pal vec/cr ultr(1) R
#pal vec/cr ratetr(1) R
#pal vec/cr fluxtr(1) R
#pal vec/cr ulfltr(1) R
#pal *
#pal vec/cr fra(1) R
#pal vec/cr fdec(1) R
#pal vec/cr favel(1) R
#pal vec/cr rafmt(1) R
#pal vec/cr decfmt(1) R
#pal vec/cr xbs(100) R
#pal vec/cr ybs(100) R
#pal vec/cr mbs(100) R
#pal vec/cr nbs(1) i
#pal *
#pal inon = 0
#pal inoff = 0
#pal source = ' '
#pal nfirst = 1
#pal *
#pal IF [#] > 0 THEN
#pal   source = [1]
#pal   nfirst = 2
#pal   IF [#] > 1 THEN
#pal     chmode = [2]
#pal     nfirst = 3
#pal     IF [#] > 2 THEN
#pal       ffile = [3]
#pal     ENDIF
#pal   ENDIF
#pal ENDIF
#pal *      
#pal CHAIN -
#pal IF ([#] > 0).and.([chmode].eq.1) THEN
#pal   DO i=[nfirst],[#],2
#pal     IF [%i] <> 'none' THEN
#pal       CHAIN allon [%i].rz
#pal       inon = [inon] + 1
#pal     ENDIF
#pal   ENDDO
#pal   fnames = ''
#pal   DO i=[nfirst],[#],1
#pal     fnames = [fnames]//' '//[%i]
#pal   ENDDO
#pal ELSE
#pal   exec pawon.kumac
#pal   inon = non	| This is a way of using a scaler to pass
#pal                 | a variable to a macro, and return a var.
#pal ENDIF
#pal *
#pal nfirst = [nfirst]+1
#pal *
#pal IF ([#] > 0).and.([chmode].eq.1) THEN
#pal   DO i=[nfirst],[#],2
#pal     IF [%i] <> 'none' THEN
#pal       CHAIN allof [%i].rz
#pal       inoff = [inoff] + 1
#pal     ENDIF
#pal   ENDDO
#pal * title 'Alpha for runs"J#'//[*]
#pal   title [source]//' Analysis for runs"J#'//[fnames]
#pal ELSE
#pal   exec pawoff.kumac
#pal   inoff = noff
#pal * title 'Alpha for '//[inon]//' on, '//[inoff]//' off runs'
#pal   title [source]//' Analysis for '//[inon]//' on, '//[inoff]//' off runs'
#pal ENDIF
#pal *
#pal IF ([#] > 2) THEN
#pal   vec/read xr,yr,ped,pedvar,dped,gain [dbdir][ffile].pgvec
#pal ENDIF
#pal *
#pal message [inon]//' ON runs'
#pal message [inoff]//' OFF runs'
#pal if [inon].ne.[inoff] then
#pal   message 'WARNING: Number of OFF runs does not match number ON.'
#pal   message 'Doing tracking analysis'
#pal * message 'Exiting macro...'
#pal * goto end
#pal endif
#pal *
#pal vec/cre npairs(1) i [inon]
#pal np=[inon]
#pal *
#pal vec/cre ondurs([np]) r 	          |vector containing durations of 'on' runs
#pal vec/cre offdurs([np]) r 	  |vector containing durations of 'off' runs
#pal vec/cre durs([np]) r	          |vector containing durations of runs
#pal 				  |Using real for time means can hold
#pal 				  |166,666 mins (over 5,000 30 min runs) 
#pal 				  |to within 1 sec accuracy
#pal *	
#pal vec/cre stats(2,8) i	  |vector containing raw,nbr3,trigger,shape
#pal 				  |shape20-90,orientation,gammas
#pal                                   |and offalpha - JB 950720  for on
#pal 		   		  |& off. (1,:) is on and (2,:) is off.
#pal 				  |Using integer for these vectors means
#pal 				  |we can store 999,999,999 events 
#pal                              |(over 11,000 runs at 50 Hz). If we had 
#pal                              |used real for the vector type we could 
#pal                              |only have stored the events for 111 
#pal                              |runs (at 50Hz.). The drawback is that 
#pal                              |SIGMA will not work on integervectors 
#pal                              |(SIGMA is crap anyway) so a fortran
#pal 				  |function will have to be written to do 
#pal 				  |calculations of significances. 
#pal vec/cre sigmas(8) r
#pal *
#pal cd //allon
#pal message 'First pass - Calculating run durations for ON.'
#pal chain allon>
#pal nt/loop 100 [comisdir]durations.f(1) |1 means 'ON' data
#pal vec/copy durs ondurs		  |and 2 means 'OFF' data.
#pal *
#pal IF [inon].eq.[inoff] THEN
#pal   cd //allof
#pal   message ' '
#pal   message ' '
#pal   message ' '
#pal   message 'First pass - Calculating run durations for OFF.'
#pal   chain allof>
#pal   nt/loop 100 [comisdir]durations.f(2)
#pal   vec/copy durs offdurs
#pal ELSE
#pal   vec/copy ondurs offdurs
#pal ENDIF
#pal *
#pal sigma durs=min(ondurs,offdurs)
#pal sigma tduron=vsum(ondurs)	      |Wanted to call these totduron...
#pal sigma tduroff=vsum(offdurs)      |but sigma will not work with names
#pal sigma tdurcut=vsum(durs)         |of length > 7 character!
#pal *
#pal message ' '
#pal tmp=tduron(1)
#pal message 'Total duration of ON: '//[tmp]//' seconds.'
#pal IF [inon].eq.[inoff] THEN
#pal   tmp=tduroff(1)
#pal   message 'Total duration of OFF: '//[tmp]//' seconds.'
#pal   tmp=tdurcut(1)
#pal   message 'Total duration after cutting to ON/OFF minimum times:'_
#pal          [tmp]//' seconds.'
#pal ENDIF
#pal *
#pal picture/create palph
#pal *
#pal * Create 1-D histograms
#pal *
#pal h/cr/1d  1  ' ' 18 0.0 90.0 		| ON Data
#pal h/cr/1d  2  ' ' 18 0.0 90.0 		| OFF Data
#pal h/cr/1d  50  'ON-OFF ' 18 0.0 90.0 
#pal h/cr/1d  60  'ON+OFF ' 18 0.0 90.0 
#pal h/cr/1d  70  'Integral Excess ' 18 0.0 90.0 
#pal h/cr/1d  80  ' ' 18 0.0 90.0 		| Integral Significance
#pal *
#pal * Create 2-D histograms
#pal *
#pal h/cr/2d 21 'ON SCAT' 20 -2.0 2.0 20 -2.0 2.0
#pal h/cr/2d 22 'OFF SCAT' 20 -2.0 2.0 20 -2.0 2.0
#pal h/cr/2d 11 'ON MESH' 30 -1.5 1.5 30 -1.5 1.5
#pal h/cr/2d 15 ' ' 30 -1.5 1.5 30 -1.5 1.5
#pal h/cr/2d 16 ' ' 20 -2.0 2.0 20 -2.0 2.0
#pal *
#pal v/cr dif(18)
#pal v/cr sum(18)
#pal v/cr on(18)
#pal v/cr intsum(18)
#pal v/cr intdif(18)
#pal v/cr intsig(18) R
#pal v/cr results(15) R
#pal v/cr ontime(2) R
#pal v/cr off(18)
#pal *
#pal v/cr temp(14) r
#pal v/cr bothon(1) r
#pal v/cr bothof(1) r
#pal *
#pal v/cr meshon(30,30) R
#pal v/cr meshoff(30,30) R
#pal v/cr difmesh(30,30) R
#pal v/cr summesh(30,30) R
#pal v/cr sigmesh(30,30) R
#pal *
#pal v/cr scaton(20,20) R
#pal v/cr scatoff(20,20) R
#pal v/cr difscat(20,20) R
#pal v/cr sumscat(20,20) R
#pal v/cr sigscat(20,20) R
#pal *
#pal v/cr clevel(50) R 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
#pal *
#pal IF [inon] > 0 THEN
#pal   MESSAGE ' '
#pal   MESSAGE ' '
#pal   MESSAGE '2nd pass - Cutting ON runs'
#pal   CHAIN allon>
#pal   CD //allon
#pal   nt/loop 100 [comisdir]cut_time.f(1.) 
#pal   hist/get/cont 11 meshon | Copy summed ON-mesh hist into a vector
#pal   hist/del 11             | Delete hist for accumulation of OFF-hists
#pal ENDIF                                 
#pal *
#pal hist/get/cont 21 scaton
#pal hist/create/2d 11 'OFF MESH' 30 -1.5 1.5 30 -1.5 1.5
#pal *
#pal IF [inoff] > 0 THEN
#pal   MESSAGE ' '
#pal   MESSAGE ' '
#pal   MESSAGE '2nd pass - Cutting OFF runs'
#pal   CHAIN allof>
#pal   CD //allof
#pal   nt/loop 100 [comisdir]cut_time.f(2.)
#pal   hist/get/cont 11 meshoff | Copy summed OFF-mesh hist into a vector
#pal   hist/del 11
#pal ENDIF
#pal *
#pal hist/get/cont 22 scatoff
#pal *
#pal sigma summesh=meshon+meshoff
#pal sigma difmesh=meshon-meshoff
#pal sigma sigmesh=difmesh/sqrt(summesh)
#pal *
#pal sigma sumscat=scaton+scatoff
#pal sigma difscat=scaton-scatoff
#pal sigma sigscat=difscat/sqrt(sumscat)
#pal *
#pal IF [inon].eq.[inoff] THEN
#pal   call [comisdir]calc_sigs.f
#pal ENDIF
#pal *
#pal h/op/sub 1 2 50 1.0 1.0		| Histogram 50 is on-off
#pal h/op/add 1 2 60 1.0 1.0		| Histogran 60 is on+off
#pal * 
#pal h/get/cont 50 dif		| Get contents of histograms intop vectors
#pal h/get/cont 60 sum			
#pal h/get/cont 1 on
#pal h/get/cont 2 off               |JQ 950426		
#pal * 
#pal * xn = [#]/2
#pal * vec/input ontime [xn] 0.0
#pal vec/input ontime [inon] [inoff]
#pal * 
#pal APPLIcation COMIS QUIT 
#pal             SUBROUTINE LOOP
#pal             Vector dif
#pal             Vector sum
#pal             Vector intdif
#pal             Vector intsum
#pal             Vector intsig
#pal             Vector results
#pal             Vector on
#pal             Vector ontime
#pal 	    Vector tdurcut
#pal 	    Vector stats
#pal 	    Vector sigmas
#pal             Vector roffon
#pal *
#pal * ON/OFF analysis
#pal *
#pal 	    ngam=stats(1,7)-stats(2,7)
#pal 	    results(1)=ngam/(tdurcut(1)/60.0)
#pal 	    results(2)=sigmas(7)/SQRT(ontime(1))
#pal 	    results(3)=ngam
#pal 	    results(4)=sigmas(7)
#pal *
#pal * Tracking analysis
#pal *
#pal             results(11)=stats(1,7)-stats(1,8)/roffon(1) ! Excess
#pal             results(12)=(stats(1,7)+stats(1,8))/roffon(1)
#pal             if(results(12).gt.0.0) then
#pal               results(12) = sqrt(results(12))
#pal               if(results(12).gt.0.0) then
#pal                 results(12)=results(11)/results(12)
#pal               else
#pal                 results(12) = 0.0
#pal               endif
#pal             else
#pal               results(12) = 0.0
#pal             endif
#pal             results(13) = results(11)/(tdurcut(1)/60.0)
#pal             results(14) = results(12)/SQRT(ontime(1))
#pal *
#pal             xsum = 0.
#pal             xdif = 0.
#pal             xonmax = 0.
#pal             intdif(1) = dif(1)
#pal             intsum(1) = sum(1)
#pal             do 10 i=2,18
#pal               intsum(i) = intsum(i-1)+sum(i)
#pal               intdif(i) = intdif(i-1)+dif(i)
#pal             enddo
#pal    10       continue 
#pal             do 20 i=1,18
#pal               if(on(i).gt.xonmax) then
#pal                 xonmax = on(i)
#pal               endif
#pal               if(intsum(i).gt.0.) then
#pal                 xarg = sqrt(intsum(i))
#pal                 if(xarg.gt.0.) then
#pal                   intsig(i) = intdif(i)/xarg
#pal                 else
#pal                   intsig(i) = 0.
#pal                 endif
#pal               else
#pal                 intsig(i) = 0.
#pal               endif
#pal             enddo
#pal    20       continue 
#pal *
#pal             results(5) = xonmax*1.3
#pal             results(6) = xonmax*1.24
#pal             results(7) = xonmax*1.18
#pal             results(8) = xonmax*1.12
#pal             results(9) = xonmax*1.06
#pal             results(10) = xonmax*1.00
#pal             end
#pal             call loop
#pal             end
#pal     QUIT
#pal * 
#pal ymax=results(5)			| Scale y-axis of plots
#pal h/set/maximum 1 [ymax]
#pal h/set/minimum 1 0.0
#pal h/set/maximum 2 [ymax]
#pal h/set/minimum 2 0.0
#pal *
#pal * PLOT 1
#pal *
#pal *** First plot on with off shown as dashed histo
#pal h/pl 1  ; set dmod 1 k
#pal h/pl 1 pes 1
#pal set dmod 2
#pal h/pl 2 s
#pal set dmod 1
#pal atitle 'Alpha "M#deg"N#' ' '
#pal set xlab 1.2
#pal atitle '' 'Events per 5 degree'
#pal * set xlab 0.5
#pal *
#pal *** Draw box with excess and significance
#pal xexp=results(1)        | ON-OFF per minute		
#pal xsigp=results(2)       | Significance per pair
#pal xext=results(3)        | ON-OFF total excess for all pairs
#pal xsigt=results(4)       | Total significance for all pairs
#pal xexta=results(11)      | ON-OFF for alpha analysis, total
#pal xsigta=results(12)     | Significance for alpha analysis, total
#pal xexpa=results(13)      | ON-OFF per minute for alpha analysis
#pal xsigpa=results(14)     | Significance for alpha analysis, per run
#pal * 
#pal y1=results(10)
#pal y2=results(5)
#pal y1=results(6)
#pal y2=results(7)
#pal y3=results(8)
#pal y4=results(9)
#pal * BOX 40 90 [y1] [y2]
#pal * 
#pal * if [inoff].eq.[inon] then    | Only do on off if num on/off runs match
#pal *   text 65 [y1] 'Excess"J# '//[xexp]//' [g]/min' 0.2 ! c
#pal *   text 65 [y2] 'Sig"J# '//[xsigp]//' [s]/pair' 0.2 ! c
#pal *   text 65 [y3] 'Total Excess"J# '//[xext]//' [g]' 0.2 ! c
#pal *   text 65 [y4] 'Total Sig"J# '//[xsigt]//' [s]' 0.2 ! c
#pal * else			| Otherwise do alpha analysis
#pal *   text 65 [y1] 'Excess"J# '//[xexpa]//' [g]/min' 0.2 ! c
#pal *   text 65 [y2] 'Sig"J# '//[xsigpa]//' [s]/pair' 0.2 ! c
#pal *   text 65 [y3] 'Total Excess"J# '//[xexta]//' [g]' 0.2 ! c
#pal *   text 65 [y4] 'Total Sig"J# '//[xsigta]//' [s]' 0.2 ! c
#pal * endif
#pal * 
#pal h/set/maximum 1 [ymax]
#pal h/set/minimum 1 0.0
#pal h/set/maximum 2 [ymax]
#pal h/set/minimum 2 0.0
#pal * 
#pal h/put/cont 70 intdif	| Put contents of vector xx into histogram 70
#pal h/put/cont 80 intsig
#pal * 
#pal |*** Plot the difference between on and off as a histogram
#pal |h/pl 50
#pal |atitle 'Alpha (deg)' ' '
#pal |set dmod 2
#pal |line 0.0 0.0 90.0 0.0
#pal |set dmod 1
#pal * 
#pal |*** Plot the integral excess histogram 
#pal |h/pl 70
#pal |set dmod 2
#pal |line 0.0 0.0 90.0 0.0
#pal |set dmod 1
#pal *
#pal * PLOT 2
#pal *
#pal * Calculate Li and Ma significance, Helene upper limits
#pal *
#pal call [comisdir]ulcomis.f
#pal *** Plot the integral significance histogram
#pal zon 2 3 2 s
#pal nul 0 16 0 14 AB
#pal text 1 14 'Total Duration   "J# '//$eval(tdurcut(1))//' seconds.           '_
#pal   0.25 ! l
#pal text 1 13 'TRACKING ANALYSIS "J#' 0.25 ! l
#pal text 1 12.6 '-------------' 0.25 ! l
#pal text 1 12 'ON "J# '//[cut7]//' Events"J# '//$eval(stats(1,7)) _
#pal   0.25 ! l
#pal text 1 11 'OFF"J# '//[cut8]//' Events"J# '//$eval(stats(1,8)) _
#pal   0.25 ! l
#pal text 1 10 'OFF/ON Ratio     "J# '//$eval(roffon(1)) 0.25 ! l
#pal tmpval=$format($eval(sigtr(1)),f6.2)
#pal text 1 9 'Significance"J# '//[tmpval]//' [s]' 0.25 ! l
#pal sigtmp = $eval(sigtr(1))
#pal IF [sigtmp] > 0.0 THEN
#pal   tmpval = $format($eval(ratetr(1)),f7.3)
#pal   tmppm = $format($sigma(ratetr(1)/sigtr(1)),f7.3)
#pal   text 1 8 _
#pal 'Rate"J#  '//[tmpval]//'"a#'//[tmppm]//' [g]/min' 0.25 ! l
#pal   tmpval=$format($eval(fluxtr(1)),f9.3)
#pal   tmppm=$format($sigma(fluxtr(1)/sigtr(1)),f7.3) 
#pal   text 1 7 _
#pal 'Flux"J# '//[tmpval]//'"a#'//[tmppm]//'"X#10^-12!cm^-2!s^-1!' 0.25 ! l
#pal ENDIF
#pal tmpval = $format($eval(ultr(1)),f7.3)
#pal text 1 6  'Rate u.l."J# '//[tmpval]//' [g]/min' 0.25 ! l
#pal tmpval = $format($eval(ulfltr(1)),f9.3)
#pal text 1 5 'Flux u.l."J# '//[tmpval]//'"X#10^-12!cm^-2!s^-1!' 0.25 ! l
#pal *
#pal IF [inon].eq.[inoff] THEN
#pal   text 1 4 'ON/OFF ANALYSIS "J#' 0.25 ! l
#pal   text 1 3.6 '------------' 0.25 ! l
#pal   tmpval=$format($eval(sigoo(1)),f6.2)
#pal   text 1 3 'Significance"J# '//[tmpval]//' [s]' 0.25 ! l
#pal   sigtmp = $eval(sigoo(1))
#pal   IF [sigtmp] > 0.0 THEN
#pal     tmpval = $format($eval(rateoo(1)),f7.3)
#pal     tmppm = $format($sigma(rateoo(1)/sigoo(1)),f7.3)
#pal     text 1 2 _
#pal 'Rate"J#  '//[tmpval]//'"a#'//[tmppm]//' [g]/min' 0.25 ! l
#pal     tmpval=$format($eval(fluxoo(1)),f9.3)
#pal     tmppm=$format($sigma(fluxoo(1)/sigoo(1)),f7.3) 
#pal     text 1 1 _
#pal 'Flux"J# '//[tmpval]//'"a#'//[tmppm]//'"X#10^-12!cm^-2!s^-1!' 0.25 ! l
#pal   ENDIF
#pal   tmpval = $format($eval(uloo(1)),f7.3)
#pal   text 1 0  'Rate u.l."J# '//[tmpval]//' [g]/min' 0.25 ! l
#pal   tmpval = $format($eval(ulfloo(1)),f9.3)
#pal   text 1 -1 'Flux u.l."J# '//[tmpval]//'"X#10^-12!cm^-2!s^-1!' 0.25 ! l
#pal ENDIF
#pal *
#pal * PLOT 3
#pal *
#pal 
#pal IF [#] > 2 then
#pal   IF [inon].eq.[inoff] THEN
#pal     exec alphatot#whipcam xr yr dped
#pal   ELSE
#pal     vec/cr pedflat(109) r
#pal     vec/read pedflat [dbdir]pedflat.vec
#pal APPLIcatio COMIS QUIT
#pal       subroutine pedsub()
#pal 
#pal       vector pedvar,pedflat
#pal       integer i
#pal      
#pal       do i=1,109
#pal         pedvar(i)=(pedvar(i)*pedvar(i)-pedflat(i)*pedflat(i))
#pal         if pedvar(i).gt.0.0 then
#pal           pedvar(i)=sqrt(pedvar(i))
#pal         else
#pal           pedvar(i) = -1.0*sqrt(-1.0*pedvar(i))
#pal         endif
#pal       enddo
#pal       return
#pal       end
#pal       call pedsub
#pal       end
#pal QUIT
#pal *    sigma meanpv = sumv(pedvar)/109.0
#pal *    sigma pedvar = pedvar - meanpv
#pal     exec alphatot#whipcam xr yr pedvar
#pal   ENDIF
#pal   atitle 'Stars ([D]pedvar)    X"M#deg"N#' 'Y"M#deg"N#'
#pal ELSE
#pal   nul 0 16 0 16 AB
#pal ENDIF
#pal *
#pal * PLOT 4
#pal *
#pal IF [chmode].eq.0 THEN	| Do 2-d plot if chain is explicit
#pal *
#pal * First plot significance contours
#pal *
#pal * hist/put/cont 16 sigscat
#pal * contour 16 10 2
#pal   hist/put/cont 15 sigmesh
#pal   contour 15 ! 2 clevel
#pal   atitle 'Significance at X"M#deg"N#' 'Y"M#deg"N#'
#pal ELSE
#pal   nul -1.5 1.5 -1.5 1.5 AB
#pal ENDIF
#pal *
#pal * Get RA and DEC from a file, find bright stars in the
#pal * vicinity
#pal *
#pal for/file 20 [ffile]//.hdr
#pal for/file 21 [comisdir]pawbs.db
#pal APPLIcation COMIS QUIT 
#pal       subroutine gradec
#pal 
#pal       vector	fra,fdec,favel
#pal       vector    rafmt,decfmt
#pal       vector	xbs,ybs,mbs,nbs
#pal *
#pal       character	cline*80
#pal       real	ra,dec
#pal       real	hh,mm,ss,radeg,dd,arcmm,arcss,decdeg 
#pal       real      ratmp,dectmp,magtmp
#pal       real	aveel
#pal       integer   nstars
#pal       integer	i,j
#pal       real	denom
#pal *
#pal       cline='                                        '
#pal       do while (cline(1:2) .ne. 'ra')
#pal         cline='                                        '
#pal         read(20,100,end=99)cline
#pal       end do
#pal       read(cline(15:30),*)ra
#pal       do while (cline(1:3) .ne. 'dec')
#pal         cline='                                        '
#pal         read(20,100,end=99)cline
#pal       end do
#pal       read(cline(15:30),*)dec
#pal       do while (cline(1:3) .ne. 'ave')
#pal         cline='                                        '
#pal         read(20,100,end=99)cline
#pal       end do
#pal       read(cline(15:30),*)aveel
#pal *
#pal       rafmt(1) = ra	! Formatted ra: hhmmss.s
#pal       decfmt(1) = dec	! Formatted dec: ddmmss.s
#pal *
#pal *     write(*,*)'ra,dec:',ra,dec
#pal       hh=aint(ra/10000.)
#pal       mm=aint((ra-hh*10000)/100.)
#pal       ss=ra-hh*10000-mm*100.
#pal       radeg=(hh+mm/60.+ss/3600.)*15.0
#pal *
#pal       dd=aint(dec/10000.)
#pal       arcmm=aint((dec-dd*10000.)/100.)
#pal       arcss=dec-dd*10000.-arcmm*100.
#pal       decdeg=dd+arcmm/60.0+arcss/3600.
#pal *
#pal *     write(*,*)'radeg,decdeg:',radeg,decdeg
#pal *
#pal       ra = radeg/57.29577951
#pal       dec = decdeg/57.29577951
#pal *
#pal       fra(1) = ra
#pal       fdec(1) = dec
#pal       favel(1) = aveel
#pal *
#pal       j=1
#pal       do i=1,1500
#pal         read(21,*,end=55)ratmp,dectmp,magtmp
#pal         if(abs(dectmp-decdeg).lt.2.0) then
#pal           dectmp=dectmp/57.29577951
#pal           ratmp=ratmp/57.29577951
#pal           denom = sin(dec)*sin(dectmp)+cos(dec)*cos(dectmp)*
#pal      &            cos(ratmp-ra)
#pal           if(denom.gt.0.0) then
#pal             xbs(j)=57.29577951*cos(dectmp)*sin(ratmp-ra)/denom
#pal             ybs(j)=57.29577951*(cos(dec)*sin(dectmp)-
#pal      &             sin(dec)*cos(dectmp)*cos(ratmp-ra))/denom
#pal *           write(*,*)'ra,dec,mag: ',ratmp,dectmp,magtmp
#pal *           write(*,*)'xbs,ybs: ',xbs(j),ybs(j)
#pal             if((xbs(j).gt.-1.5).and.(xbs(j).lt.1.5).and.
#pal      &         (ybs(j).gt.-1.5).and.(ybs(j).lt.1.5)) then
#pal               mbs(j)=7.0-magtmp
#pal               if(mbs(j).gt.0.0) then
#pal                 write(*,*)'Found star in field at: (',xbs(j),',',
#pal      &             ybs(j),')'
#pal                 j=j+1
#pal                 if(j.gt.100) goto 55
#pal               endif
#pal             endif
#pal           endif
#pal         endif
#pal       enddo
#pal 55    nbs(1)=j
#pal 99    continue
#pal 100   format(a)
#pal       return
#pal       end
#pal       call gradec
#pal       end
#pal QUIT
#pal close 21
#pal close 20
#pal nstars = $eval(nbs(1))
#pal nstars = [nstars]-1
#pal xra = $format($eval(rafmt),f8.1)
#pal xdec = $format($eval(decfmt),f9.1)
#pal aetmp = $format($eval(favel(1)),f7.2)
#pal text -1.5 1.8 'Average Elevation"J# '//[aetmp] 0.25 ! l
#pal text -1.5 1.6 _
#pal [source]//' RA"J# '//[xra]//', DEC"J# '//[xdec] 0.25 ! l
#pal IF [chmode].eq.0 THEN	| Do 2-d plot if chain is explicit
#pal   set mtyp 20
#pal   DO i=1,[nstars]
#pal     scale = $eval(mbs([i]))
#pal     scale = 0.3+[scale]*0.25
#pal     set mscf [scale]
#pal     graph 1 xbs([i]) ybs([i]) 'p'
#pal     message 'Star '//[i]//': '//$eval(xbs([i]))//','//$eval(ybs([i]))
#pal   ENDDO
#pal   text 1.6 1.4 'Mag.' 0.25 ! l
#pal   set mtyp 20
#pal   vec/cr ykey(6) r 1.1 0.85 0.6 0.35 0.1 -0.15
#pal   txtdpt = 0.2666
#pal   text 1.6 $eval(ykey(1)) '"0#' (0.3+6*0.25)*[txtdpt] ! l
#pal   text 1.85 $eval(ykey(1)) '1' 0.25 ! l
#pal   text 1.6 $eval(ykey(2)) '"0#' (0.3+5*0.25)*[txtdpt] ! l
#pal   text 1.85 $eval(ykey(2)) '2' 0.25 ! l
#pal   text 1.6 $eval(ykey(3)) '"0#' (0.3+4*0.25)*[txtdpt] ! l
#pal   text 1.85 $eval(ykey(3)) '3' 0.25 ! l
#pal   text 1.6 $eval(ykey(4)) '"0#' (0.3+3*0.25)*[txtdpt] ! l
#pal   text 1.85 $eval(ykey(4)) '4' 0.25 ! l
#pal   text 1.6 $eval(ykey(5)) '"0#' (0.3+2*0.25)*[txtdpt] ! l
#pal   text 1.85 $eval(ykey(5)) '5' 0.25 ! l
#pal   text 1.6 $eval(ykey(6)) '"0#' (0.3+1*0.25)*[txtdpt] ! l
#pal   text 1.85 $eval(ykey(6)) '6' 0.25 ! l
#pal *
#pal * Now plot RA and DEC contours
#pal *
#pal   RA = $eval(fra(1))
#pal   DEC = $eval(fdec(1))
#pal * RA = 89.7311/57.29577951
#pal * DEC = 23.0080/57.29577951
#pal   XLO = -1.5/57.29577951
#pal   XHI = 1.5/57.29577951
#pal   func/fun2 25 atan(((sin([DEC])+y*cos([DEC]))/(cos([DEC])-y*sin([DEC])))*cos(atan(x/(cos([DEC])-y*sin([DEC]))))) 60 [XLO] [XHI] 60 _
#pal     [XLO] [XHI] ' '
#pal   func/fun2 26 [RA]+atan(x/(cos([DEC])-y*sin([DEC]))) 60 [XLO] [XHI] 60 _
#pal     [XLO] [XHI] ' '
#pal *
#pal * Create vector of 0.3deg offsets in RA or DEC
#pal *
#pal   vec/create offset(17) R -0.05585 -0.04887 -0.04189 -0.03491 -0.02793 _
#pal  -0.02094 -0.01396 -0.00698 0.0 0.00698 0.01396 0.02094 0.02793 0.03491 _
#pal  0.04189 0.04887 0.05585
#pal   vec/create allalpha(17) R 17*[RA]
#pal   vec/create alldec(17) R 17*[DEC]
#pal   vec/op/vadd offset alldec cdec
#pal   vec/op/vadd offset allalpha calpha
#pal   DO i=1,17
#pal     tmpvar = $eval(cdec([i]))
#pal     maxa = $HINFO(25,'MAX')
#pal     mina = $HINFO(25,'MIN')
#pal     maxb = $HINFO(26,'MAX')
#pal     minb = $HINFO(26,'MIN')
#pal 
#pal     IF [tmpvar] < [maxa] THEN
#pal       tmpvar = $eval(cdec([i]))
#pal       IF [tmpvar] > [mina] THEN
#pal         contour 25 ! 2S cdec([i]:[i])
#pal       ENDIF
#pal     ENDIF
#pal     tmpvar = $eval(calpha([i]))
#pal     IF [tmpvar] < [maxb] THEN
#pal       tmpvar = $eval(calpha([i]))
#pal       IF [tmpvar] > [minb] THEN
#pal         contour 26 ! 2S calpha([i]:[i])
#pal       ENDIF
#pal     ENDIF
#pal   ENDDO
#pal * set XSIZ 0
#pal * set YSIZ 0
#pal ELSE			| Do rate plots only if chain given on command
#pal 			| line, and if only one on/off pair is
#pal 			| given.
#pal * zone 2 4 7 s
#pal   set mtyp 0
#pal   IF [np].eq.1 THEN
#pal     dur1=durs(1)
#pal     1d 90 ' ' 30 0. 1800.	         | ON Raw rate	
#pal     1d 95 ' ' 30 0. 1800.	         | OFF Raw rate
#pal     cd //allon
#pal     nt/proj 90 100.t10phase t10livetime.lt.[dur1]
#pal     cd //allof
#pal     nt/proj 95 100.t10phase t10livetime.lt.[dur1]
#pal *   zon 2 4 07 's'
#pal     IF [inon].eq.[inoff] THEN
#pal       zon 2 6 6 s
#pal     ELSE
#pal       zon 2 3 4 s
#pal     ENDIF
#pal     hi/plot 90 ' '
#pal     hi/plot 90 'es'
#pal     atitle 'ON- Raw Rate ' ' '
#pal     IF [inon].eq.[inoff] THEN
#pal       zon 2 6 8 s
#pal       hi/plot 95 ' '
#pal       hi/plot 95 'es'
#pal       zon 2 3 5 s
#pal       atitle 'OFF- Raw Rate' ' '
#pal     ENDIF
#pal   ELSE
#pal *   set XSIZ 20
#pal *   set YSIZ 40
#pal *   hist/put/cont 16 sigscat
#pal *   contour 16 10 2
#pal     hist/put/cont 15 sigmesh
#pal     contour 15 ! 2 clevel
#pal *   set XSIZ 0
#pal *   set YSIZ 0
#pal   ENDIF
#pal ENDIF
#pal * 
#pal opt linx 
#pal opt nsta
#pal *
#pal |v/print on
#pal |v/print results
#pal |v/print ontime
#pal *
#pal * nul 0 16 1 13 AB
#pal nul 0 16 -3 12 AB
#pal *
#pal |call [comisdir]calc_sigs.f
#pal *
#pal ron=stats(1,1)
#pal roff=stats(2,1)
#pal rs=sigmas(1)
#pal *
#pal nbron=stats(1,2)
#pal nbroff=stats(2,2)
#pal nbrsig=sigmas(2)
#pal *
#pal ton=stats(1,3)
#pal toff=stats(2,3)
#pal ts=sigmas(3)
#pal *
#pal son=stats(1,4)
#pal soff=stats(2,4)
#pal ss=sigmas(4)
#pal *
#pal sn2090=stats(1,5)
#pal sf2090=stats(2,5)
#pal ss2090=sigmas(5)
#pal *
#pal oon=stats(1,6)
#pal ooff=stats(2,6)
#pal os=sigmas(6)
#pal *
#pal bon=stats(1,7)
#pal boff=stats(2,7)
#pal *
#pal rs=$substring([rs],1,7)
#pal nbrsig=$substring([nbrsig],1,7)
#pal ts=$substring([ts],1,7)
#pal os=$substring([os],1,7)
#pal ss=$substring([ss],1,7)
#pal ss2090=$substring([ss2090],1,7)
#pal xsigt=$substring([xsigt],1,7)
#pal *
#pal text 5 12.25 'RAW' 0.2 ! l
#pal text 10 12.25 'NBR3' 0.2 ! l
#pal text 15 12.25 'TRIGGER' 0.2 ! l
#pal text 20 12.25 'SHAPE' 0.2 ! l
#pal text 24 12.25 'SHAPE 20-90' 0.2 ! l
#pal text 30 12.25 'ORIENT' 0.2 ! l
#pal text 35 12.25 'BOTH' 0.2 ! l
#pal text 1 10.75 'ON' 0.2 ! l
#pal IF [inon].eq.[inoff] THEN
#pal   text 1 10 'OFF' 0.2 ! l
#pal   text 1 8.5 'EXCESS' 0.2 ! l
#pal ENDIF
#pal line='------------------------------------------------------------------'   
#pal text 1 13 [line] 0.2 ! l
#pal text 1 11.5 [line] 0.2 ! l
#pal text 5 10.75 [ron] 0.2 ! l
#pal text 10 10.75 [nbron] 0.2 ! l
#pal text 15 10.75 [ton] 0.2 ! l
#pal text 20 10.75 [son] 0.2 ! l
#pal text 25 10.75 [sn2090] 0.2 ! l
#pal text 30 10.75 [oon] 0.2 ! l
#pal text 35 10.75 [bon] 0.2 ! l
#pal text 1 9.25 [line] 0.2 ! l
#pal IF [inon].eq.[inoff] THEN
#pal   text 5 10 [roff] 0.2 ! l
#pal   text 5 8.5 [rs] 0.2 ! l
#pal   text 10 10 [nbroff] 0.2 ! l
#pal   text 10 8.5 [nbrsig] 0.2 ! l
#pal   text 15 10 [toff] 0.2 ! l
#pal   text 15 8.5 [ts] 0.2 ! l
#pal   text 20 10 [soff] 0.2 ! l
#pal   text 20 8.5 [ss] 0.2 ! l
#pal   text 25 10 [sf2090] 0.2 ! l
#pal   text 25 8.5  [ss2090] 0.2 ! l
#pal   text 30 10 [ooff] 0.2 ! l
#pal   text 30 8.5 [os] 0.2 ! l
#pal   text 35 10 [boff] 0.2 ! l
#pal   text 35 8.5 [xsigt] 0.2 ! l
#pal ENDIF
#pal *
#pal * IF [inon].eq.[inoff] THEN
#pal *   gpm=$format([xexp],f6.3)
#pal *   gpmr=[xexp]/[xsigt]
#pal *   gpmrate=$format([gpmr],f6.3)
#pal *   text 1 6 'Total Duration '//$eval(tdurcut(1))//' seconds.           '_
#pal * //[g]//' rate '//[gpm]//"a#//[gpmrate]//' per minute' 0.25 ! l
#pal * ELSE
#pal *   gpm=$format([xexpa],f6.3)
#pal *   gpmr=[xexpa]/[xsigta]
#pal * ENDIF 
#pal *
#pal * text 1 6 'Total Duration '//$eval(tdurcut(1))//' seconds.           '_
#pal * //[g]//' rate '//[xexp]//' per minute' 0.25 ! l
#pal *
#pal * nul 0 16 0 10 AB
#pal text 1 7.1 'Cuts"J# ' 0.23 ! l
#pal text 1 6.2 [cut1] 0.23 ! 1
#pal text 1 5.3 [cut2] 0.23 ! l
#pal text 1 4.4 [cut3] 0.23 ! l
#pal text 1 3.5 [cut4] 0.23 ! l
#pal text 1 2.6 [cut5] 0.23 ! l
#pal text 1 1.7 [cut6] 0.23 ! l
#pal text 1 0.8 [cut7] 0.23 ! l
#pal *
#pal zon 2 3 5 s
#pal nul 0 16 0 16 AB
#pal text -4 3 'Alpha ON "J#' 0.17 ! l
#pal IF [inon].eq.[inoff] THEN
#pal   text -4 0 'Alpha OFF "J#' 0.17 ! l
#pal ENDIF
#pal |text 1 2.8 'Integral ' 0.25 ! l
#pal do i=1,6
#pal *   alphatxton=on([i])
#pal *   text 5*[i]+3 5 [alphatxton] 0.25 ! 1
#pal *   alphatxton=on([i]+6)
#pal *   text 5*[i]+3 4 [alphatxton] 0.25 ! 1
#pal *   alphatxton=on([i]+12)
#pal *   text 5*[i]+3 3 [alphatxton] 0.25 ! 1
#pal     alphatxton=on([i])
#pal     text 3*[i]-2 3 [alphatxton] 0.17 ! 1
#pal     alphatxton=on([i]+6)
#pal     text 3*[i]-2 2 [alphatxton] 0.17 ! 1
#pal     alphatxton=on([i]+12)
#pal     text 3*[i]-2 1 [alphatxton] 0.17 ! 1
#pal *
#pal     IF [inon].eq.[inoff] THEN
#pal *     alphatxtoff=off([i])
#pal *     text 5*[i]+3 2 [alphatxtoff] 0.25 ! 1
#pal *     alphatxtoff=off([i]+6)
#pal *     text 5*[i]+3 1 [alphatxtoff] 0.25 ! 1
#pal *     alphatxtoff=off([i]+12)
#pal *     text 5*[i]+3 0 [alphatxtoff] 0.25 ! 1
#pal       alphatxtoff=off([i])
#pal       text 3*[i]-2 0 [alphatxtoff] 0.17 ! 1
#pal       alphatxtoff=off([i]+6)
#pal       text 3*[i]-2 -1 [alphatxtoff] 0.17 ! 1
#pal       alphatxtoff=off([i]+12)
#pal       text 3*[i]-2 -2 [alphatxtoff] 0.17 ! 1
#pal     ENDIF
#pal enddo
#pal *
#pal IF [inon].eq.[inoff] THEN
#pal   zon 2 4 8 s
#pal   h/pl 80
#pal   atitle 'Alpha (deg)' 'Integral Sig. ([s])'
#pal   set dmod 2
#pal   line 0.0 0.0 90.0 0.0
#pal   set dmod 1
#pal ENDIF
#pal IF [chmode].eq.1 THEN
#pal   picture/print 'alpha_'//[ffile]//'x'//[#]//'.ps' 
#pal ELSE
#pal   picture/print alpha_total.ps
#pal ENDIF
#pal picture/del palph
#pal *
#pal close 1
#pal close 2
#pal for/file 1 'cuton.tmp' 
#pal for/file 2 'cutoff.tmp'
#pal * rewind 1
#pal * rewind 2
#pal Message 'Generating ASCII output file....'
#pal for/file 20 'pawtab.out'     |open equivalent of old tab.out for ascii
#pal                              |output of results.
#pal call [comisdir]wrpawtab.f
#pal message DONE
#pal close 1
#pal close 2
#pal close 20
#pal CHAIN -allon
#pal chain -allof
#pal v/del *
#pal h/delete 0
#pal close 0
#pal *
#pal end:
#pal return
#pal *
#pal *************************************************************
#pal *
#pal MACRO whipcam
#pal *
#pal *
#pal *  Usage: exec quicklook4#whipcam [x y] [vec]
#pal *
#pal *  Plot vector "vec" of 109 values on the default x,y
#pal *  tube coordinates of the whipple camera, or those specified
#pal *  by the vectors "x" and "y"
#pal *
#pal vec/create x(109) R
#pal vec/input x(1:20) _
#pal 0.000000000 0.259000003 0.129999995 -0.129999995 -0.259000003 _
#pal -0.129999995 0.129999995 0.518000007 0.388999999 0.259000003 _
#pal 0.000000000 -0.259000003 -0.388999999 -0.518000007 -0.388999999 _
#pal -0.259000003 0.000000000 0.259000003 0.388999999 0.777000010
#pal vec/input x(21:40) _
#pal 0.647000015 0.518000007 0.388999999 0.129999995 -0.129999995 _
#pal -0.388999999 -0.518000007 -0.647000015 -0.777000010 -0.647000015 _
#pal -0.518000007 -0.388999999 -0.129999995 0.129999995 0.388999999 _
#pal 0.518000007 0.647000015 1.036000013 0.906000018 0.777000010
#pal vec/input x(41:60) _
#pal 0.647000015 0.518000007 0.259000003 0.000000000 -0.259000003 _
#pal -0.518000007 -0.647000015 -0.777000010 -0.906000018 -1.0360000 _
#pal -0.906000018 -0.777000010 -0.644999981 -0.518000007 -0.2590000 _
#pal 0.000000000 0.259000003 0.518000007 0.644999981 0.777000010
#pal vec/input x(61:80) _
#pal 0.906000018 1.294999957 1.164999962 1.036000013 0.906000018 _
#pal 0.777000010 0.647000015 0.388999999 0.129999995 -0.129999995 _
#pal -0.388999999 -0.647000015 -0.777000010 -0.906000018 -1.0360000 _
#pal -1.164999962 -1.294999957 -1.164999962 -1.036000013 -0.9060000
#pal vec/input x(81:109) _
#pal -0.777000010 -0.647000015 -0.388999999 -0.130999997 0.1299999 _
#pal 0.388999999 0.647000015 0.777000010 0.906000018 1.036000013 _
#pal 1.164999962 1.294999957 1.164999962 1.036000013 0.259000003 _
#pal 0.000000000 -0.259000003 -1.036000013 -1.164999962 -1.2949999 _
#pal -1.294999957 -1.164999962 -1.036000013 -0.259000003 0.0000000 _
#pal 0.259000003 1.036000013 1.164999962 1.294999957
#pal *
#pal vec/create y(109) R
#pal vec/input y(1:20) _
#pal 0.000000000 0.000000000 -0.224000007 -0.224000007 0.000000000 _
#pal 0.224000007 0.224000007 0.000000000 -0.224000007 -0.449000001 _
#pal -0.449000001 -0.449000001 -0.224000007 0.000000000 0.224000007 _
#pal 0.449000001 0.449000001 0.449000001 0.224000007 0.000000000
#pal vec/input y(21:40) _
#pal -0.224000007 -0.449000001 -0.672999978 -0.672999978 -0.6729999 _
#pal -0.672999978 -0.449000001 -0.224000007 0.000000000 0.224000007 _
#pal 0.449000001 0.672999978 0.672999978 0.672999978 0.672999978 _
#pal 0.449000001 0.224000007 0.000000000 -0.224000007 -0.449000001
#pal vec/input y(41:60) _
#pal -0.672999978 -0.897000015 -0.897000015 -0.897000015 -0.8970000 _
#pal -0.897000015 -0.672999978 -0.449000001 -0.224000007 0.0000000 _
#pal 0.224000007 0.449000001 0.672999978 0.897000015 0.897000015 _
#pal 0.897000015 0.897000015 0.897000015 0.672999978 0.449000001
#pal vec/input y(61:80) _
#pal 0.224000007 0.000000000 -0.224000007 -0.449000001 -0.672999978 _
#pal -0.897000015 -1.121000051 -1.121000051 -1.121000051 -1.121000051 _
#pal -1.121000051 -1.121000051 -0.897000015 -0.672999978 -0.449000001 _
#pal -0.224000007 0.000000000 0.224000007 0.449000001 0.672999978
#pal vec/input y(81:109) _
#pal 0.897000015 1.121000051 1.121000051 1.121000051 1.121000051 _
#pal 1.121000051 1.121000051 0.897000015 0.672999978 0.449000001 _
#pal 0.224000007 -0.449000001 -0.672999978 -0.897000015 -1.345999956 _
#pal -1.345999956 -1.345999956 -0.897000015 -0.672999978 -0.449000001 _
#pal 0.449000001 0.672999978 0.897000015 1.345999956 1.345999956 _
#pal 1.345999956 0.897000015 0.672999978 0.449000001
#pal *
#pal * vec/read x,y whip10m.coords
#pal graphics/attrib/sfais 1
#pal graphics/attrib/sfaci 10
#pal graphics/attrib/sfaci 6
#pal null -1.7 1.7 -1.7 1.7
#pal *
#pal if [#].eq.0 then
#pal   do i=1,109
#pal         graphics/primitives/arc x([i]) y([i]) 0.124 0.124
#pal         graphics/pr/text x([i]) y([i])-0.04 [i] .15 ! c
#pal   enddo
#pal else
#pal   if [#].eq.3 then
#pal     vec/del x
#pal     vec/del y
#pal     vec/create x(109) R
#pal     vec/create y(109) R
#pal     vec/copy [1] x
#pal     vec/copy [2] y
#pal     vec/copy [3] adc
#pal *   message 'Using x,y vectors from command line'
#pal   else
#pal     vec/copy  [1] adc
#pal   endif
#pal * vec/cre adcor(109) r
#pal * vec/copy adc adcor
#pal   vec/copy adc(1:61) adcin
#pal   sigma dmax=vmax(adc)	| Find max adc value for inner 61 PMTs
#pal   sigma tnmax=lvmax(adcin)
#pal   imtmp=tnmax(1)
#pal   maxtmp=dmax(1)
#pal   vec/cr xasum(1) R 0.0
#pal   vec/cr yasum(1) R 0.0
#pal   vec/cr nasum(1) R 0.0
#pal   vec/op/vscale adc (0.124/dmax) adc
#pal   do i=1,109
#pal       tmp = adc([i])
#pal       if [tmp] > 0.0 then
#pal         sigma delx=(x([i])-x([imtmp]))
#pal         sigma dely=(y([i])-y([imtmp]))
#pal         sigma adist=delx*delx+dely*dely
#pal         tmp=adist(1)
#pal         if [tmp] < 0.36 then
#pal           sigma xasum = xasum+adc([i])*adc([i])*x([i])
#pal           sigma yasum = yasum+adc([i])*adc([i])*y([i])
#pal           sigma nasum = nasum+adc([i])*adc([i])
#pal         endif 
#pal         graphics/primitives/arc x([i]) y([i]) 0 adc([i])
#pal       else
#pal         graphics/primitives/arc x([i]) y([i]) adc([i]) adc([i])
#pal       endif
#pal       graphics/pr/arc x([i]) y([i]) 0.124 0.124
#pal *     graphics/pr/text x([i]) y([i])-0.04 [i] .15 ! c
#pal   enddo
#pal   tmp=nasum(1)
#pal   if [tmp] > 0.0 then
#pal     sigma xaave = xasum/nasum
#pal     sigma yaave = yasum/nasum
#pal     xstr = $format($eval(xaave(1)),f7.3)
#pal     ystr = $format($eval(yaave(1)),f7.3)
#pal     set mtyp 2
#pal     set mscf 2
#pal     graph 1 xaave(1) yaave(1) 'p'
#pal     if [maxtmp] > 2.0 then
#pal       graphics/pr/text -1.0 1.5 _
#pal 'Star at ('//[xstr]//','//[ystr]//')' .25 ! l
#pal     endif
#pal   endif  
#pal   tdmax=dmax(1)
#pal   txt='0 to '//[tdmax]
#pal   graphics/pr/text 1.0 -1.5  [txt] .25 ! c
#pal endif
#pal *
#pal return
#pal 
