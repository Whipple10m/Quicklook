MACRO alphatot
*
* JB 950720
*
* exec alphatot [sourcename] [mode] [datafile, ...]
*
*               sourcename       String with no blanks containing source name
*               mode             0 - use chains in pawon.kumac, pawoff.kumac
*                                1 - build chains w/ cmd line args
*               datafile         Data filename in the format gt????
*                                give first filename even if creating chain
*                               
* Revision History (incomplete):
*
* JB 950715
* Expanded version of JQ's alphatime.kumac, to accumulate results of 2-d
* analysis, and display ON-OFF pedestal variances for a pointing check.
*
* JQ 950630 
* PAW script which cuts parameterised .rz files(pairs only, no tracking)
* Based on Jim Buckley's alphatot.kumac but with severeal differences-
* mainly the use of selectyion functions and duration matching.
* The script matches durations carefully, but is slow as this requires 2
* passes through the ntuple chain. The run-by-run durations are calculated
* for each on/off pair and each pair is cut to the smaller of that pair.
* Requires pawon and pawoff kumacs which generate chains and return into
* vectors inonn and inoff the number of pairs. The selection function
* for the first pass is durations.f and for the second pass is cut_time.f
* Modified (JQ 950704) so that it uses selection functions from the directory
* /data5/quinn/paw/uwfunc/analyse3 and this directory is pointed to by 
* the variable [comisdir]
*
*
comisdir='/usr/local/whipple/prog/alphatot/'    |Home dir for sel. functions.
dbdir='/home/dbgt/pgvec/'
*
************************************************************************
* Edit the following block of code to change cuts, on/off alpha        *
* ratio etc.
*
* Define cuts (note if any new cuts are added or any are removed then the 
* cut selection function (in directory [comisdir]) cut_time.f, the comis
* routine for writing the start of the pawtab.out file and the routine which
* prints the text on the picture (in this macro) must also be edited.
*
* vec/cre dist(2) r 0.51 1.1
vec/cre dist(2) r 0.51 1.0
vec/cre width(2) r 0.073 0.15
vec/cre length(2) r 0.16 0.3
vec/cre size(1) r 400.           |cut to size > this value.
* vec/cre trig(2) r 45. 45.
vec/cre trig(2) r 100. 80.
vec/cre nbr3(1) r 0.5            | >0 means this cut is 'on'
vec/cre alpha(1) r 10.           |in degrees.
vec/cre offal(2) r 15. 65.
*
vec/cre roffon(1) r 5.26	 | OFF/ON alpha ratio
vec/cre efarea(1) r 3.5          | Effective area [x 10^8 cm^2]
*                                                                      *
************************************************************************
*
sigma sinalp=sin(alpha(1)*pi/180)
vec/cre offsa(2) r $sigma(sin(offal(1)*pi/180)) $sigma(sin(offal(2)*pi/180))
*
vec/cre cv(13) r dist(1) dist(2) width(1) width(2) length(1) length(2) _
	size(1) trig(1) trig(2) nbr3(1) sinalp(1) offsa(1) offsa(2)
*
cut1=$eval(dist(1))"L# Distance "L#$eval(dist(2))
cut2=$eval(width(1))"L# Width "L#$eval(width(2))
cut3=$eval(length(1))"L# Length "L#$eval(Length(2))
cut4=Size "G#$eval(size(1))
cut5=1/91"G#$eval(trig(1)), 2/91"G#$eval(trig(2))
cut6=Nbr3 "G#$eval(nbr3(1))
cut7=[a]"L#$eval(alpha(1))^o!
cut8=$eval(offal(1))"L#[a]"L#$eval(offal(2))^o!
*
opt nbox            | no box around plot
opt a4
opt linx
opt liny
set mtyp 1          | marker type
set xlab 1.5        | dist label to y-axis (default = 1.4)
set asiz 0.28	    | axis label size (default = 0.28)
set XMGL 3.0        | Margins (defualt = 2.0)	
set XMGR 2.0
set YMGL 2.0
set YMGU 3.0
opt linx
opt liny
opt nsta
set HTYP 0
* zon 2 3 
zon 2 3
h/del *
*
for/file 1 'cuton.tmp' 
for/file 2 'cutoff.tmp'
vec/cre non(1) i 0        | no. of on runs.
vec/cre noff(1) i 0       | no. of off runs.
*
vec/cr xr(109) R
vec/cr yr(109) R
vec/cr ped(109) R
vec/cr pedvar(109) R
vec/cr dped(109) R
vec/cr gain(109) R
vec/cr meanpv(1) R	| mean ped. variance
*
* Define vectors to store results from the COMIS function
* ulcomis.f
*
vec/cr sigoo(1) R
vec/cr uloo(1) R
vec/cr rateoo(1) R
vec/cr fluxoo(1) R
vec/cr ulfloo(1) R
vec/cr sigtr(1) R
vec/cr ultr(1) R
vec/cr ratetr(1) R
vec/cr fluxtr(1) R
vec/cr ulfltr(1) R
*
vec/cr fra(1) R
vec/cr fdec(1) R
vec/cr favel(1) R
vec/cr rafmt(1) R
vec/cr decfmt(1) R
vec/cr xbs(100) R
vec/cr ybs(100) R
vec/cr mbs(100) R
vec/cr nbs(1) i
*
inon = 0
inoff = 0
source = ' '
nfirst = 1
*
IF [#] > 0 THEN
  source = [1]
  nfirst = 2
  IF [#] > 1 THEN
    chmode = [2]
    nfirst = 3
    IF [#] > 2 THEN
      ffile = [3]
    ENDIF
  ENDIF
ENDIF
*      
CHAIN -
IF ([#] > 0).and.([chmode].eq.1) THEN
  DO i=[nfirst],[#],2
    IF [%i] <> 'none' THEN
      CHAIN allon [%i].rz
      inon = [inon] + 1
    ENDIF
  ENDDO
  fnames = ''
  DO i=[nfirst],[#],1
    fnames = [fnames]//' '//[%i]
  ENDDO
ELSE
  exec pawon.kumac
  inon = non	| This is a way of using a scaler to pass
                | a variable to a macro, and return a var.
ENDIF
*
nfirst = [nfirst]+1
*
IF ([#] > 0).and.([chmode].eq.1) THEN
  DO i=[nfirst],[#],2
    IF [%i] <> 'none' THEN
      CHAIN allof [%i].rz
      inoff = [inoff] + 1
    ENDIF
  ENDDO
* title 'Alpha for runs"J#'//[*]
  title [source]//' Analysis for runs"J#'//[fnames]
ELSE
  exec pawoff.kumac
  inoff = noff
* title 'Alpha for '//[inon]//' on, '//[inoff]//' off runs'
  title [source]//' Analysis for '//[inon]//' on, '//[inoff]//' off runs'
ENDIF
*
IF ([#] > 2) THEN
  vec/read xr,yr,ped,pedvar,dped,gain [dbdir][ffile].pgvec
ENDIF
*
message [inon]//' ON runs'
message [inoff]//' OFF runs'
if [inon].ne.[inoff] then
  message 'WARNING: Number of OFF runs does not match number ON.'
  message 'Doing tracking analysis'
* message 'Exiting macro...'
* goto end
endif
*
vec/cre npairs(1) i [inon]
np=[inon]
*
vec/cre ondurs([np]) r 	          |vector containing durations of 'on' runs
vec/cre offdurs([np]) r 	  |vector containing durations of 'off' runs
vec/cre durs([np]) r	          |vector containing durations of runs
				  |Using real for time means can hold
				  |166,666 mins (over 5,000 30 min runs) 
				  |to within 1 sec accuracy
*	
vec/cre stats(2,8) i		  |vector containing raw,nbr3,trigger,shape
				  |shape20-90,orientation,gammas
                                  |and offalpha - JB 950720  for on
		   		  |& off. (1,:) is on and (2,:) is off.
				  |Using integer for these vectors means
				  |we can store 999,999,999 events 
                                  |(over 11,000 runs at 50 Hz). If we had 
                                  |used real for the vector type we could 
                                  |only have stored the events for 111 
                                  |runs (at 50Hz.). The drawback is that 
                                  |SIGMA will not work on integervectors 
                                  |(SIGMA is crap anyway) so a fortran
				  |function will have to be written to do 
				  |calculations of significances. 
vec/cre sigmas(8) r
*
cd //allon
message 'First pass - Calculating run durations for ON.'
chain allon>
nt/loop 100 [comisdir]durations.f(1) |Using convention that 1 means 'ON' data
vec/copy durs ondurs		     |and 2 means 'OFF' data.
*
IF [inon].eq.[inoff] THEN
  cd //allof
  message ' '
  message ' '
  message ' '
  message 'First pass - Calculating run durations for OFF.'
  chain allof>
  nt/loop 100 [comisdir]durations.f(2)
  vec/copy durs offdurs
ELSE
  vec/copy ondurs offdurs
ENDIF
*
sigma durs=min(ondurs,offdurs)
sigma tduron=vsum(ondurs)	        |Wanted to call these totduron...
sigma tduroff=vsum(offdurs)		|but sigma will not work with names
sigma tdurcut=vsum(durs)       		|of length > 7 character!
*
message ' '
tmp=tduron(1)
message 'Total duration of ON: '//[tmp]//' seconds.'
IF [inon].eq.[inoff] THEN
  tmp=tduroff(1)
  message 'Total duration of OFF: '//[tmp]//' seconds.'
  tmp=tdurcut(1)
  message 'Total duration after cutting to ON/OFF minimum times:'_
         [tmp]//' seconds.'
ENDIF
*
picture/create palph
*
* Create 1-D histograms
*
h/cr/1d  1  ' ' 18 0.0 90.0 		| ON Data
h/cr/1d  2  ' ' 18 0.0 90.0 		| OFF Data
h/cr/1d  50  'ON-OFF ' 18 0.0 90.0 
h/cr/1d  60  'ON+OFF ' 18 0.0 90.0 
h/cr/1d  70  'Integral Excess ' 18 0.0 90.0 
h/cr/1d  80  ' ' 18 0.0 90.0 		| Integral Significance
*
* Create 2-D histograms
*
h/cr/2d 21 'ON SCAT' 20 -2.0 2.0 20 -2.0 2.0
h/cr/2d 22 'OFF SCAT' 20 -2.0 2.0 20 -2.0 2.0
h/cr/2d 11 'ON MESH' 30 -1.5 1.5 30 -1.5 1.5
h/cr/2d 15 ' ' 30 -1.5 1.5 30 -1.5 1.5
h/cr/2d 16 ' ' 20 -2.0 2.0 20 -2.0 2.0
*
v/cr dif(18)
v/cr sum(18)
v/cr on(18)
v/cr intsum(18)
v/cr intdif(18)
v/cr intsig(18) R
v/cr results(15) R
v/cr ontime(2) R
v/cr off(18)
*
v/cr temp(14) r
v/cr bothon(1) r
v/cr bothof(1) r
*
v/cr meshon(30,30) R
v/cr meshoff(30,30) R
v/cr difmesh(30,30) R
v/cr summesh(30,30) R
v/cr sigmesh(30,30) R
*
v/cr scaton(20,20) R
v/cr scatoff(20,20) R
v/cr difscat(20,20) R
v/cr sumscat(20,20) R
v/cr sigscat(20,20) R
*
v/cr clevel(50) R 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49
*
IF [inon] > 0 THEN
  MESSAGE ' '
  MESSAGE ' '
  MESSAGE '2nd pass - Cutting ON runs'
  CHAIN allon>
  CD //allon
  nt/loop 100 [comisdir]cut_time.f(1.) 
  hist/get/cont 11 meshon | Copy summed ON-mesh hist into a vector
  hist/del 11             | Delete hist for accumulation of OFF-hists
ENDIF                                 
*
hist/get/cont 21 scaton
hist/create/2d 11 'OFF MESH' 30 -1.5 1.5 30 -1.5 1.5
*
IF [inoff] > 0 THEN
  MESSAGE ' '
  MESSAGE ' '
  MESSAGE '2nd pass - Cutting OFF runs'
  CHAIN allof>
  CD //allof
  nt/loop 100 [comisdir]cut_time.f(2.)
  hist/get/cont 11 meshoff | Copy summed OFF-mesh hist into a vector
  hist/del 11
ENDIF
*
hist/get/cont 22 scatoff
*
sigma summesh=meshon+meshoff
sigma difmesh=meshon-meshoff
sigma sigmesh=difmesh/sqrt(summesh)
*
sigma sumscat=scaton+scatoff
sigma difscat=scaton-scatoff
sigma sigscat=difscat/sqrt(sumscat)
*
IF [inon].eq.[inoff] THEN
  call [comisdir]calc_sigs.f
ENDIF
*
h/op/sub 1 2 50 1.0 1.0		| Histogram 50 is on-off
h/op/add 1 2 60 1.0 1.0		| Histogran 60 is on+off
* 
h/get/cont 50 dif		| Get contents of histograms intop vectors
h/get/cont 60 sum			
h/get/cont 1 on
h/get/cont 2 off               |JQ 950426		
* 
* xn = [#]/2
* vec/input ontime [xn] 0.0
vec/input ontime [inon] [inoff]
* 
APPLIcation COMIS QUIT 
            SUBROUTINE LOOP
            Vector dif
            Vector sum
            Vector intdif
            Vector intsum
            Vector intsig
            Vector results
            Vector on
            Vector ontime
	    Vector tdurcut
	    Vector stats
	    Vector sigmas
            Vector roffon
*
* ON/OFF analysis
*
	    ngam=stats(1,7)-stats(2,7)
	    results(1)=ngam/(tdurcut(1)/60.0)
	    results(2)=sigmas(7)/SQRT(ontime(1))
	    results(3)=ngam
	    results(4)=sigmas(7)
*
* Tracking analysis
*
            results(11)=stats(1,7)-stats(1,8)/roffon(1) ! Excess
            results(12)=(stats(1,7)+stats(1,8))/roffon(1)
            if(results(12).gt.0.0) then
              results(12) = sqrt(results(12))
              if(results(12).gt.0.0) then
                results(12)=results(11)/results(12)
              else
                results(12) = 0.0
              endif
            else
              results(12) = 0.0
            endif
            results(13) = results(11)/(tdurcut(1)/60.0)
            results(14) = results(12)/SQRT(ontime(1))
*
            xsum = 0.
            xdif = 0.
            xonmax = 0.
            intdif(1) = dif(1)
            intsum(1) = sum(1)
            do 10 i=2,18
              intsum(i) = intsum(i-1)+sum(i)
              intdif(i) = intdif(i-1)+dif(i)
            enddo
   10       continue 
            do 20 i=1,18
              if(on(i).gt.xonmax) then
                xonmax = on(i)
              endif
              if(intsum(i).gt.0.) then
                xarg = sqrt(intsum(i))
                if(xarg.gt.0.) then
                  intsig(i) = intdif(i)/xarg
                else
                  intsig(i) = 0.
                endif
              else
                intsig(i) = 0.
              endif
            enddo
   20       continue 
*
            results(5) = xonmax*1.3
            results(6) = xonmax*1.24
            results(7) = xonmax*1.18
            results(8) = xonmax*1.12
            results(9) = xonmax*1.06
            results(10) = xonmax*1.00
            end
            call loop
            end
    QUIT
* 
ymax=results(5)			| Scale y-axis of plots
h/set/maximum 1 [ymax]
h/set/minimum 1 0.0
h/set/maximum 2 [ymax]
h/set/minimum 2 0.0
*
* PLOT 1
*
*** First plot on with off shown as dashed histo
h/pl 1  ; set dmod 1 k
h/pl 1 pes 1
set dmod 2
h/pl 2 s
set dmod 1
atitle 'Alpha "M#deg"N#' ' '
set xlab 1.2
atitle '' 'Events per 5 degree'
* set xlab 0.5
*
*** Draw box with excess and significance
xexp=results(1)        | ON-OFF per minute		
xsigp=results(2)       | Significance per pair
xext=results(3)        | ON-OFF total excess for all pairs
xsigt=results(4)       | Total significance for all pairs
xexta=results(11)      | ON-OFF for alpha analysis, total
xsigta=results(12)     | Significance for alpha analysis, total
xexpa=results(13)      | ON-OFF per minute for alpha analysis
xsigpa=results(14)     | Significance for alpha analysis, per run
* 
y1=results(10)
y2=results(5)
y1=results(6)
y2=results(7)
y3=results(8)
y4=results(9)
* BOX 40 90 [y1] [y2]
* 
* if [inoff].eq.[inon] then	| Only do on off if num on/off runs match
*   text 65 [y1] 'Excess"J# '//[xexp]//' [g]/min' 0.2 ! c
*   text 65 [y2] 'Sig"J# '//[xsigp]//' [s]/pair' 0.2 ! c
*   text 65 [y3] 'Total Excess"J# '//[xext]//' [g]' 0.2 ! c
*   text 65 [y4] 'Total Sig"J# '//[xsigt]//' [s]' 0.2 ! c
* else			| Otherwise do alpha analysis
*   text 65 [y1] 'Excess"J# '//[xexpa]//' [g]/min' 0.2 ! c
*   text 65 [y2] 'Sig"J# '//[xsigpa]//' [s]/pair' 0.2 ! c
*   text 65 [y3] 'Total Excess"J# '//[xexta]//' [g]' 0.2 ! c
*   text 65 [y4] 'Total Sig"J# '//[xsigta]//' [s]' 0.2 ! c
* endif
* 
h/set/maximum 1 [ymax]
h/set/minimum 1 0.0
h/set/maximum 2 [ymax]
h/set/minimum 2 0.0
* 
h/put/cont 70 intdif	| Put contents of vector xx into histogram 70
h/put/cont 80 intsig
* 
|*** Plot the difference between on and off as a histogram
|h/pl 50
|atitle 'Alpha (deg)' ' '
|set dmod 2
|line 0.0 0.0 90.0 0.0
|set dmod 1
* 
|*** Plot the integral excess histogram 
|h/pl 70
|set dmod 2
|line 0.0 0.0 90.0 0.0
|set dmod 1
*
* PLOT 2
*
* Calculate Li and Ma significance, Helene upper limits
*
call [comisdir]ulcomis.f
*** Plot the integral significance histogram
zon 2 3 2 s
nul 0 16 0 14 AB
text 1 14 'Total Duration   "J# '//$eval(tdurcut(1))//' seconds.           '_
  0.25 ! l
text 1 13 'TRACKING ANALYSIS "J#' 0.25 ! l
text 1 12.6 '-------------' 0.25 ! l
text 1 12 'ON "J# '//[cut7]//' Events"J# '//$eval(stats(1,7)) _
  0.25 ! l
text 1 11 'OFF"J# '//[cut8]//' Events"J# '//$eval(stats(1,8)) _
  0.25 ! l
text 1 10 'OFF/ON Ratio     "J# '//$eval(roffon(1)) 0.25 ! l
tmpval=$format($eval(sigtr(1)),f6.2)
text 1 9 'Significance"J# '//[tmpval]//' [s]' 0.25 ! l
sigtmp = $eval(sigtr(1))
IF [sigtmp] > 0.0 THEN
  tmpval = $format($eval(ratetr(1)),f7.3)
  tmppm = $format($sigma(ratetr(1)/sigtr(1)),f7.3)
  text 1 8 _
'Rate"J#  '//[tmpval]//'"a#'//[tmppm]//' [g]/min' 0.25 ! l
  tmpval=$format($eval(fluxtr(1)),f9.3)
  tmppm=$format($sigma(fluxtr(1)/sigtr(1)),f7.3) 
  text 1 7 _
'Flux"J# '//[tmpval]//'"a#'//[tmppm]//'"X#10^-12!cm^-2!s^-1!' 0.25 ! l
ENDIF
tmpval = $format($eval(ultr(1)),f7.3)
text 1 6  'Rate u.l."J# '//[tmpval]//' [g]/min' 0.25 ! l
tmpval = $format($eval(ulfltr(1)),f9.3)
text 1 5 'Flux u.l."J# '//[tmpval]//'"X#10^-12!cm^-2!s^-1!' 0.25 ! l
*
IF [inon].eq.[inoff] THEN
  text 1 4 'ON/OFF ANALYSIS "J#' 0.25 ! l
  text 1 3.6 '------------' 0.25 ! l
  tmpval=$format($eval(sigoo(1)),f6.2)
  text 1 3 'Significance"J# '//[tmpval]//' [s]' 0.25 ! l
  sigtmp = $eval(sigoo(1))
  IF [sigtmp] > 0.0 THEN
    tmpval = $format($eval(rateoo(1)),f7.3)
    tmppm = $format($sigma(rateoo(1)/sigoo(1)),f7.3)
    text 1 2 _
'Rate"J#  '//[tmpval]//'"a#'//[tmppm]//' [g]/min' 0.25 ! l
    tmpval=$format($eval(fluxoo(1)),f9.3)
    tmppm=$format($sigma(fluxoo(1)/sigoo(1)),f7.3) 
    text 1 1 _
'Flux"J# '//[tmpval]//'"a#'//[tmppm]//'"X#10^-12!cm^-2!s^-1!' 0.25 ! l
  ENDIF
  tmpval = $format($eval(uloo(1)),f7.3)
  text 1 0  'Rate u.l."J# '//[tmpval]//' [g]/min' 0.25 ! l
  tmpval = $format($eval(ulfloo(1)),f9.3)
  text 1 -1 'Flux u.l."J# '//[tmpval]//'"X#10^-12!cm^-2!s^-1!' 0.25 ! l
ENDIF
*
* PLOT 3
*

IF [#] > 2 then
  IF [inon].eq.[inoff] THEN
    exec alphatot#whipcam xr yr dped
  ELSE
    vec/cr pedflat(109) r
    vec/read pedflat [dbdir]pedflat.vec
APPLIcatio COMIS QUIT
      subroutine pedsub()

      vector pedvar,pedflat
      integer i
     
      do i=1,109
        pedvar(i)=(pedvar(i)*pedvar(i)-pedflat(i)*pedflat(i))
        if pedvar(i).gt.0.0 then
          pedvar(i)=sqrt(pedvar(i))
        else
          pedvar(i) = -1.0*sqrt(-1.0*pedvar(i))
        endif
      enddo
      return
      end
      call pedsub
      end
QUIT
*    sigma meanpv = sumv(pedvar)/109.0
*    sigma pedvar = pedvar - meanpv
    exec alphatot#whipcam xr yr pedvar
  ENDIF
  atitle 'Stars ([D]pedvar)    X"M#deg"N#' 'Y"M#deg"N#'
ELSE
  nul 0 16 0 16 AB
ENDIF
*
* PLOT 4
*
IF [chmode].eq.0 THEN	| Do 2-d plot if chain is explicit
*
* First plot significance contours
*
* hist/put/cont 16 sigscat
* contour 16 10 2
  hist/put/cont 15 sigmesh
  contour 15 ! 2 clevel
  atitle 'Significance at X"M#deg"N#' 'Y"M#deg"N#'
ELSE
  nul -1.5 1.5 -1.5 1.5 AB
ENDIF
*
* Get RA and DEC from a file, find bright stars in the
* vicinity
*
for/file 20 [ffile]//.hdr
for/file 21 [comisdir]pawbs.db
APPLIcation COMIS QUIT 
      subroutine gradec

      vector	fra,fdec,favel
      vector    rafmt,decfmt
      vector	xbs,ybs,mbs,nbs
*
      character	cline*80
      real	ra,dec
      real	hh,mm,ss,radeg,dd,arcmm,arcss,decdeg 
      real      ratmp,dectmp,magtmp
      real	aveel
      integer   nstars
      integer	i,j
      real	denom
*
      cline='                                        '
      do while (cline(1:2) .ne. 'ra')
        cline='                                        '
        read(20,100,end=99)cline
      end do
      read(cline(15:30),*)ra
      do while (cline(1:3) .ne. 'dec')
        cline='                                        '
        read(20,100,end=99)cline
      end do
      read(cline(15:30),*)dec
      do while (cline(1:3) .ne. 'ave')
        cline='                                        '
        read(20,100,end=99)cline
      end do
      read(cline(15:30),*)aveel
*
      rafmt(1) = ra	! Formatted ra: hhmmss.s
      decfmt(1) = dec	! Formatted dec: ddmmss.s
*
*     write(*,*)'ra,dec:',ra,dec
      hh=aint(ra/10000.)
      mm=aint((ra-hh*10000)/100.)
      ss=ra-hh*10000-mm*100.
      radeg=(hh+mm/60.+ss/3600.)*15.0
*
      dd=aint(dec/10000.)
      arcmm=aint((dec-dd*10000.)/100.)
      arcss=dec-dd*10000.-arcmm*100.
      decdeg=dd+arcmm/60.0+arcss/3600.
*
*     write(*,*)'radeg,decdeg:',radeg,decdeg
*
      ra = radeg/57.29577951
      dec = decdeg/57.29577951
*
      fra(1) = ra
      fdec(1) = dec
      favel(1) = aveel
*
      j=1
      do i=1,1500
        read(21,*,end=55)ratmp,dectmp,magtmp
        if(abs(dectmp-decdeg).lt.2.0) then
          dectmp=dectmp/57.29577951
          ratmp=ratmp/57.29577951
          denom = sin(dec)*sin(dectmp)+cos(dec)*cos(dectmp)*
     &            cos(ratmp-ra)
          if(denom.gt.0.0) then
            xbs(j)=57.29577951*cos(dectmp)*sin(ratmp-ra)/denom
            ybs(j)=57.29577951*(cos(dec)*sin(dectmp)-
     &             sin(dec)*cos(dectmp)*cos(ratmp-ra))/denom
*           write(*,*)'ra,dec,mag: ',ratmp,dectmp,magtmp
*           write(*,*)'xbs,ybs: ',xbs(j),ybs(j)
            if((xbs(j).gt.-1.5).and.(xbs(j).lt.1.5).and.
     &         (ybs(j).gt.-1.5).and.(ybs(j).lt.1.5)) then
              mbs(j)=7.0-magtmp
              if(mbs(j).gt.0.0) then
                write(*,*)'Found star in field at: (',xbs(j),',',
     &             ybs(j),')'
                j=j+1
                if(j.gt.100) goto 55
              endif
            endif
          endif
        endif
      enddo
55    nbs(1)=j
99    continue
100   format(a)
      return
      end
      call gradec
      end
QUIT
close 21
close 20
nstars = $eval(nbs(1))
nstars = [nstars]-1
xra = $format($eval(rafmt),f8.1)
xdec = $format($eval(decfmt),f9.1)
aetmp = $format($eval(favel(1)),f7.2)
text -1.5 1.8 'Average Elevation"J# '//[aetmp] 0.25 ! l
text -1.5 1.6 _
[source]//' RA"J# '//[xra]//', DEC"J# '//[xdec] 0.25 ! l
IF [chmode].eq.0 THEN	| Do 2-d plot if chain is explicit
  set mtyp 20
  DO i=1,[nstars]
    scale = $eval(mbs([i]))
    scale = 0.3+[scale]*0.25
    set mscf [scale]
    graph 1 xbs([i]) ybs([i]) 'p'
    message 'Star '//[i]//': '//$eval(xbs([i]))//','//$eval(ybs([i]))
  ENDDO
  text 1.6 1.4 'Mag.' 0.25 ! l
  set mtyp 20
  vec/cr ykey(6) r 1.1 0.85 0.6 0.35 0.1 -0.15
  txtdpt = 0.2666
  text 1.6 $eval(ykey(1)) '"0#' (0.3+6*0.25)*[txtdpt] ! l
  text 1.85 $eval(ykey(1)) '1' 0.25 ! l
  text 1.6 $eval(ykey(2)) '"0#' (0.3+5*0.25)*[txtdpt] ! l
  text 1.85 $eval(ykey(2)) '2' 0.25 ! l
  text 1.6 $eval(ykey(3)) '"0#' (0.3+4*0.25)*[txtdpt] ! l
  text 1.85 $eval(ykey(3)) '3' 0.25 ! l
  text 1.6 $eval(ykey(4)) '"0#' (0.3+3*0.25)*[txtdpt] ! l
  text 1.85 $eval(ykey(4)) '4' 0.25 ! l
  text 1.6 $eval(ykey(5)) '"0#' (0.3+2*0.25)*[txtdpt] ! l
  text 1.85 $eval(ykey(5)) '5' 0.25 ! l
  text 1.6 $eval(ykey(6)) '"0#' (0.3+1*0.25)*[txtdpt] ! l
  text 1.85 $eval(ykey(6)) '6' 0.25 ! l
*
* Now plot RA and DEC contours
*
  RA = $eval(fra(1))
  DEC = $eval(fdec(1))
* RA = 89.7311/57.29577951
* DEC = 23.0080/57.29577951
  XLO = -1.5/57.29577951
  XHI = 1.5/57.29577951
  func/fun2 25 atan(((sin([DEC])+y*cos([DEC]))/(cos([DEC])-y*sin([DEC])))*cos(atan(x/(cos([DEC])-y*sin([DEC]))))) 60 [XLO] [XHI] 60 _
    [XLO] [XHI] ' '
  func/fun2 26 [RA]+atan(x/(cos([DEC])-y*sin([DEC]))) 60 [XLO] [XHI] 60 _
    [XLO] [XHI] ' '
*
* Create vector of 0.3deg offsets in RA or DEC
*
  vec/create offset(17) R -0.05585 -0.04887 -0.04189 -0.03491 -0.02793 _
 -0.02094 -0.01396 -0.00698 0.0 0.00698 0.01396 0.02094 0.02793 0.03491 _
 0.04189 0.04887 0.05585
  vec/create allalpha(17) R 17*[RA]
  vec/create alldec(17) R 17*[DEC]
  vec/op/vadd offset alldec cdec
  vec/op/vadd offset allalpha calpha
  DO i=1,17
    tmpvar = $eval(cdec([i]))
    maxa = $HINFO(25,'MAX')
    mina = $HINFO(25,'MIN')
    maxb = $HINFO(26,'MAX')
    minb = $HINFO(26,'MIN')

    IF [tmpvar] < [maxa] THEN
      tmpvar = $eval(cdec([i]))
      IF [tmpvar] > [mina] THEN
        contour 25 ! 2S cdec([i]:[i])
      ENDIF
    ENDIF
    tmpvar = $eval(calpha([i]))
    IF [tmpvar] < [maxb] THEN
      tmpvar = $eval(calpha([i]))
      IF [tmpvar] > [minb] THEN
        contour 26 ! 2S calpha([i]:[i])
      ENDIF
    ENDIF
  ENDDO
* set XSIZ 0
* set YSIZ 0
ELSE			| Do rate plots only if chain given on command
			| line, and if only one on/off pair is
			| given.
* zone 2 4 7 s
  set mtyp 0
  IF [np].eq.1 THEN
    dur1=durs(1)
    1d 90 ' ' 30 0. 1800.	         | ON Raw rate	
    1d 95 ' ' 30 0. 1800.	         | OFF Raw rate
    cd //allon
    nt/proj 90 100.t10phase t10livetime.lt.[dur1]
    cd //allof
    nt/proj 95 100.t10phase t10livetime.lt.[dur1]
*   zon 2 4 07 's'
    IF [inon].eq.[inoff] THEN
      zon 2 6 6 s
    ELSE
      zon 2 3 4 s
    ENDIF
    hi/plot 90 ' '
    hi/plot 90 'es'
    atitle 'ON- Raw Rate ' ' '
    IF [inon].eq.[inoff] THEN
      zon 2 6 8 s
      hi/plot 95 ' '
      hi/plot 95 'es'
      zon 2 3 5 s
      atitle 'OFF- Raw Rate' ' '
    ENDIF
  ELSE
*   set XSIZ 20
*   set YSIZ 40
*   hist/put/cont 16 sigscat
*   contour 16 10 2
    hist/put/cont 15 sigmesh
    contour 15 ! 2 clevel
*   set XSIZ 0
*   set YSIZ 0
  ENDIF
ENDIF
* 
opt linx 
opt nsta
*
|v/print on
|v/print results
|v/print ontime
*
* nul 0 16 1 13 AB
nul 0 16 -3 12 AB
*
|call [comisdir]calc_sigs.f
*
ron=stats(1,1)
roff=stats(2,1)
rs=sigmas(1)
*
nbron=stats(1,2)
nbroff=stats(2,2)
nbrsig=sigmas(2)
*
ton=stats(1,3)
toff=stats(2,3)
ts=sigmas(3)
*
son=stats(1,4)
soff=stats(2,4)
ss=sigmas(4)
*
sn2090=stats(1,5)
sf2090=stats(2,5)
ss2090=sigmas(5)
*
oon=stats(1,6)
ooff=stats(2,6)
os=sigmas(6)
*
bon=stats(1,7)
boff=stats(2,7)
*
rs=$substring([rs],1,7)
nbrsig=$substring([nbrsig],1,7)
ts=$substring([ts],1,7)
os=$substring([os],1,7)
ss=$substring([ss],1,7)
ss2090=$substring([ss2090],1,7)
xsigt=$substring([xsigt],1,7)
*
text 5 12.25 'RAW' 0.2 ! l
text 10 12.25 'NBR3' 0.2 ! l
text 15 12.25 'TRIGGER' 0.2 ! l
text 20 12.25 'SHAPE' 0.2 ! l
text 24 12.25 'SHAPE 20-90' 0.2 ! l
text 30 12.25 'ORIENT' 0.2 ! l
text 35 12.25 'BOTH' 0.2 ! l
text 1 10.75 'ON' 0.2 ! l
IF [inon].eq.[inoff] THEN
  text 1 10 'OFF' 0.2 ! l
  text 1 8.5 'EXCESS' 0.2 ! l
ENDIF
line='------------------------------------------------------------------'   
text 1 13 [line] 0.2 ! l
text 1 11.5 [line] 0.2 ! l
text 5 10.75 [ron] 0.2 ! l
text 10 10.75 [nbron] 0.2 ! l
text 15 10.75 [ton] 0.2 ! l
text 20 10.75 [son] 0.2 ! l
text 25 10.75 [sn2090] 0.2 ! l
text 30 10.75 [oon] 0.2 ! l
text 35 10.75 [bon] 0.2 ! l
text 1 9.25 [line] 0.2 ! l
IF [inon].eq.[inoff] THEN
  text 5 10 [roff] 0.2 ! l
  text 5 8.5 [rs] 0.2 ! l
  text 10 10 [nbroff] 0.2 ! l
  text 10 8.5 [nbrsig] 0.2 ! l
  text 15 10 [toff] 0.2 ! l
  text 15 8.5 [ts] 0.2 ! l
  text 20 10 [soff] 0.2 ! l
  text 20 8.5 [ss] 0.2 ! l
  text 25 10 [sf2090] 0.2 ! l
  text 25 8.5  [ss2090] 0.2 ! l
  text 30 10 [ooff] 0.2 ! l
  text 30 8.5 [os] 0.2 ! l
  text 35 10 [boff] 0.2 ! l
  text 35 8.5 [xsigt] 0.2 ! l
ENDIF
*
* IF [inon].eq.[inoff] THEN
*   gpm=$format([xexp],f6.3)
*   gpmr=[xexp]/[xsigt]
*   gpmrate=$format([gpmr],f6.3)
*   text 1 6 'Total Duration '//$eval(tdurcut(1))//' seconds.           '_
* //[g]//' rate '//[gpm]//"a#//[gpmrate]//' per minute' 0.25 ! l
* ELSE
*   gpm=$format([xexpa],f6.3)
*   gpmr=[xexpa]/[xsigta]
* ENDIF 
*
* text 1 6 'Total Duration '//$eval(tdurcut(1))//' seconds.           '_
* //[g]//' rate '//[xexp]//' per minute' 0.25 ! l
*
* nul 0 16 0 10 AB
text 1 7.1 'Cuts"J# ' 0.23 ! l
text 1 6.2 [cut1] 0.23 ! 1
text 1 5.3 [cut2] 0.23 ! l
text 1 4.4 [cut3] 0.23 ! l
text 1 3.5 [cut4] 0.23 ! l
text 1 2.6 [cut5] 0.23 ! l
text 1 1.7 [cut6] 0.23 ! l
text 1 0.8 [cut7] 0.23 ! l
*
zon 2 3 5 s
nul 0 16 0 16 AB
text -4 3 'Alpha ON "J#' 0.17 ! l
IF [inon].eq.[inoff] THEN
  text -4 0 'Alpha OFF "J#' 0.17 ! l
ENDIF
|text 1 2.8 'Integral ' 0.25 ! l
do i=1,6
*   alphatxton=on([i])
*   text 5*[i]+3 5 [alphatxton] 0.25 ! 1
*   alphatxton=on([i]+6)
*   text 5*[i]+3 4 [alphatxton] 0.25 ! 1
*   alphatxton=on([i]+12)
*   text 5*[i]+3 3 [alphatxton] 0.25 ! 1
    alphatxton=on([i])
    text 3*[i]-2 3 [alphatxton] 0.17 ! 1
    alphatxton=on([i]+6)
    text 3*[i]-2 2 [alphatxton] 0.17 ! 1
    alphatxton=on([i]+12)
    text 3*[i]-2 1 [alphatxton] 0.17 ! 1
*
    IF [inon].eq.[inoff] THEN
*     alphatxtoff=off([i])
*     text 5*[i]+3 2 [alphatxtoff] 0.25 ! 1
*     alphatxtoff=off([i]+6)
*     text 5*[i]+3 1 [alphatxtoff] 0.25 ! 1
*     alphatxtoff=off([i]+12)
*     text 5*[i]+3 0 [alphatxtoff] 0.25 ! 1
      alphatxtoff=off([i])
      text 3*[i]-2 0 [alphatxtoff] 0.17 ! 1
      alphatxtoff=off([i]+6)
      text 3*[i]-2 -1 [alphatxtoff] 0.17 ! 1
      alphatxtoff=off([i]+12)
      text 3*[i]-2 -2 [alphatxtoff] 0.17 ! 1
    ENDIF
enddo
*
IF [inon].eq.[inoff] THEN
  zon 2 4 8 s
  h/pl 80
  atitle 'Alpha (deg)' 'Integral Sig. ([s])'
  set dmod 2
  line 0.0 0.0 90.0 0.0
  set dmod 1
ENDIF
IF [chmode].eq.1 THEN
  picture/print 'alpha_'//[ffile]//'x'//[#]//'.ps' 
ELSE
  picture/print alpha_total.ps
ENDIF
picture/del palph
*
close 1
close 2
for/file 1 'cuton.tmp' 
for/file 2 'cutoff.tmp'
* rewind 1
* rewind 2
Message 'Generating ASCII output file....'
for/file 20 'pawtab.out'     |open equivalent of old tab.out for ascii
                             |output of results.
call [comisdir]wrpawtab.f
message DONE
close 1
close 2
close 20
CHAIN -allon
chain -allof
v/del *
h/delete 0
close 0
*
end:
return
*
*************************************************************
*
MACRO whipcam
*
*
*  Usage: exec quicklook4#whipcam [x y] [vec]
*
*  Plot vector "vec" of 109 values on the default x,y
*  tube coordinates of the whipple camera, or those specified
*  by the vectors "x" and "y"
*
vec/create x(109) R
vec/input x(1:20) _
0.000000000 0.259000003 0.129999995 -0.129999995 -0.259000003 _
-0.129999995 0.129999995 0.518000007 0.388999999 0.259000003 _
0.000000000 -0.259000003 -0.388999999 -0.518000007 -0.388999999 _
-0.259000003 0.000000000 0.259000003 0.388999999 0.777000010
vec/input x(21:40) _
0.647000015 0.518000007 0.388999999 0.129999995 -0.129999995 _
-0.388999999 -0.518000007 -0.647000015 -0.777000010 -0.647000015 _
-0.518000007 -0.388999999 -0.129999995 0.129999995 0.388999999 _
0.518000007 0.647000015 1.036000013 0.906000018 0.777000010
vec/input x(41:60) _
0.647000015 0.518000007 0.259000003 0.000000000 -0.259000003 _
-0.518000007 -0.647000015 -0.777000010 -0.906000018 -1.0360000 _
-0.906000018 -0.777000010 -0.644999981 -0.518000007 -0.2590000 _
0.000000000 0.259000003 0.518000007 0.644999981 0.777000010
vec/input x(61:80) _
0.906000018 1.294999957 1.164999962 1.036000013 0.906000018 _
0.777000010 0.647000015 0.388999999 0.129999995 -0.129999995 _
-0.388999999 -0.647000015 -0.777000010 -0.906000018 -1.0360000 _
-1.164999962 -1.294999957 -1.164999962 -1.036000013 -0.9060000
vec/input x(81:109) _
-0.777000010 -0.647000015 -0.388999999 -0.130999997 0.1299999 _
0.388999999 0.647000015 0.777000010 0.906000018 1.036000013 _
1.164999962 1.294999957 1.164999962 1.036000013 0.259000003 _
0.000000000 -0.259000003 -1.036000013 -1.164999962 -1.2949999 _
-1.294999957 -1.164999962 -1.036000013 -0.259000003 0.0000000 _
0.259000003 1.036000013 1.164999962 1.294999957
*
vec/create y(109) R
vec/input y(1:20) _
0.000000000 0.000000000 -0.224000007 -0.224000007 0.000000000 _
0.224000007 0.224000007 0.000000000 -0.224000007 -0.449000001 _
-0.449000001 -0.449000001 -0.224000007 0.000000000 0.224000007 _
0.449000001 0.449000001 0.449000001 0.224000007 0.000000000
vec/input y(21:40) _
-0.224000007 -0.449000001 -0.672999978 -0.672999978 -0.6729999 _
-0.672999978 -0.449000001 -0.224000007 0.000000000 0.224000007 _
0.449000001 0.672999978 0.672999978 0.672999978 0.672999978 _
0.449000001 0.224000007 0.000000000 -0.224000007 -0.449000001
vec/input y(41:60) _
-0.672999978 -0.897000015 -0.897000015 -0.897000015 -0.8970000 _
-0.897000015 -0.672999978 -0.449000001 -0.224000007 0.0000000 _
0.224000007 0.449000001 0.672999978 0.897000015 0.897000015 _
0.897000015 0.897000015 0.897000015 0.672999978 0.449000001
vec/input y(61:80) _
0.224000007 0.000000000 -0.224000007 -0.449000001 -0.672999978 _
-0.897000015 -1.121000051 -1.121000051 -1.121000051 -1.121000051 _
-1.121000051 -1.121000051 -0.897000015 -0.672999978 -0.449000001 _
-0.224000007 0.000000000 0.224000007 0.449000001 0.672999978
vec/input y(81:109) _
0.897000015 1.121000051 1.121000051 1.121000051 1.121000051 _
1.121000051 1.121000051 0.897000015 0.672999978 0.449000001 _
0.224000007 -0.449000001 -0.672999978 -0.897000015 -1.345999956 _
-1.345999956 -1.345999956 -0.897000015 -0.672999978 -0.449000001 _
0.449000001 0.672999978 0.897000015 1.345999956 1.345999956 _
1.345999956 0.897000015 0.672999978 0.449000001
*
* vec/read x,y whip10m.coords
graphics/attrib/sfais 1
graphics/attrib/sfaci 10
graphics/attrib/sfaci 6
null -1.7 1.7 -1.7 1.7
*
if [#].eq.0 then
  do i=1,109
        graphics/primitives/arc x([i]) y([i]) 0.124 0.124
        graphics/pr/text x([i]) y([i])-0.04 [i] .15 ! c
  enddo
else
  if [#].eq.3 then
    vec/del x
    vec/del y
    vec/create x(109) R
    vec/create y(109) R
    vec/copy [1] x
    vec/copy [2] y
    vec/copy [3] adc
*   message 'Using x,y vectors from command line'
  else
    vec/copy  [1] adc
  endif
* vec/cre adcor(109) r
* vec/copy adc adcor
  vec/copy adc(1:61) adcin
  sigma dmax=vmax(adc)	| Find max adc value for inner 61 PMTs
  sigma tnmax=lvmax(adcin)
  imtmp=tnmax(1)
  maxtmp=dmax(1)
  vec/cr xasum(1) R 0.0
  vec/cr yasum(1) R 0.0
  vec/cr nasum(1) R 0.0
  vec/op/vscale adc (0.124/dmax) adc
  do i=1,109
      tmp = adc([i])
      if [tmp] > 0.0 then
        sigma delx=(x([i])-x([imtmp]))
        sigma dely=(y([i])-y([imtmp]))
        sigma adist=delx*delx+dely*dely
        tmp=adist(1)
        if [tmp] < 0.36 then
          sigma xasum = xasum+adc([i])*adc([i])*x([i])
          sigma yasum = yasum+adc([i])*adc([i])*y([i])
          sigma nasum = nasum+adc([i])*adc([i])
        endif 
        graphics/primitives/arc x([i]) y([i]) 0 adc([i])
      else
        graphics/primitives/arc x([i]) y([i]) adc([i]) adc([i])
      endif
      graphics/pr/arc x([i]) y([i]) 0.124 0.124
*     graphics/pr/text x([i]) y([i])-0.04 [i] .15 ! c
  enddo
  tmp=nasum(1)
  if [tmp] > 0.0 then
    sigma xaave = xasum/nasum
    sigma yaave = yasum/nasum
    xstr = $format($eval(xaave(1)),f7.3)
    ystr = $format($eval(yaave(1)),f7.3)
    set mtyp 2
    set mscf 2
    graph 1 xaave(1) yaave(1) 'p'
    if [maxtmp] > 2.0 then
      graphics/pr/text -1.0 1.5 _
'Star at ('//[xstr]//','//[ystr]//')' .25 ! l
    endif
  endif  
  tdmax=dmax(1)
  txt='0 to '//[tdmax]
  graphics/pr/text 1.0 -1.5  [txt] .25 ! c
endif
*
return

