****************************************************************************
* relat_gain.kumac
*
* This kumac computes the gain relative to a reference file given in the 
* histogram file ref_zen_gain.hbook using the spectrum of signals recorded
* by the second highest tube in the image (max2).
*
* Usage: exec relat_gain gt4285.rz
*        where gt4285.rz is the parameter ntuple whose gain you want to check.
*
* Output: gainfig.ps
*         which gives a plot with the relative gain fit and comparison of the 
*         spectrum with the comparison file.
*
* 000123 SLB First version.
* 000224 MAC Add a few more comment and make the program work in paw 94a.
***************************************************************************
opt liny
opt logx
opt tic
opt grid
opt utitl
set pass 3
set vfon -10

opt nbox

ali/cr binnb 40               |No. of bins in histogram
ali/cr p2max 600.0            |Upper bound of histogram
ali/cr p2min 20.0             |Lower bound of histogram
ali/cr nbpoints 31            |Num points in gain fit
ali/cr gainmin 0.5            
ali/cr gainstep 0.05
ali/cr npfit 17
ali/cr weigh 1.00
ali/cr varr t10max3           |Ntuple name for max3
ali/cr timeref t10livetime    |Ntuple name for livetime
ali/cr ntplid 100             |Ntuple ID

ve/cr gain(nbpoints) R
ve/cr vchi(nbpoints) R
ve/cr vchier(nbpoints) R
vect/cr tdur(1) R

* Open the reference distribution histogram file
hi/file 2 ref_zen_gain.hbook
ve/cr val1(binnb) R
hi/get_vect/content 1 val1

* Identify the location of the maximum of the distribution
*old do i=1,(binnb)
*old 	if val1([i]).eq.$hinfo(1,'MAX') then
*old 		sigma imax1=[i]
*olld 	endif
*old enddo
sigma imax1=lvmax(val1)

* Open the current ntuple
hi/file 1 [1]
* Get the duration of the run for normalisation
nt/loop 100 duration.f
v/pr tdur
*old NTUPLE/DUMP ntplid.(timeref)  ! 1 1 tmp
*old vect/cr tdeb(1) R
*old vect/read tdeb tmp
*old NTUPLE/DUMP ntplid.(timeref)  ! 1 $HINFO(ntplid,'ENTRIES') tmp
*old vect/cr tend(1) R
*old vect/read tend tmp
*old sigma tdur=(tend-tdeb)
sigma tdur=1/tdur

***************************************************************************
* Here comes the relative gain calibration.
***************************************************************************
do j=1,nbpoints
   h/cr/1d 2 'Calibrate' binnb p2min p2max 
* Pick a relative gain and normalize the bin contents by that value.
   vect/input gain([j]:[j]) $sigma(([j]-1)*(gainstep)+(gainmin)) 
   nt/proj 2  ntplid.((varr)/$sigma(gain([j]))) (weigh)
* Renormalize the duration.
   hi/op/add 2 2 2 $sigma(tdur) 0. E
* Compare the count rates of the reference file to the current file for the
* assumed gain.
   h/cr/1d 3 'Difference' binnb p2min p2max
   hi/op/sub 1 2 3 1.0 1.0 E

* Feed vector with contents and errors of 3
   ve/cr val(binnb) R
   ve/cr err(binnb) R
   ve/cr chi2(binnb) R
   hi/get_vect/content 3 val
   hi/get_vect/error   3 err

* Compute the chi2 terms=((val/err)^2)
   vector/operation/vdivide val err chi2
   vector/operation/vmultiply chi2 chi2 chi2 

* Seeks for the max of histo 2
   ve/cr val2(binnb) R
   hi/get_vect/content 2 val2
   sigma imax2=lvmax(val2)
*old   do i=1,(binnb)
*old      if val2([i]).eq.$hinfo(2,'MAX') then
*old         sigma imax2=[i]
*old      endif
*old   enddo
*   vect/print imax2
	
* Identifies the rightmost maximum bin of the two
   if imax1.gt.imax2 then
      sigma itop=imax1
   else 
      sigma itop=imax2
   endif
*   vect/print itop

* Computes the chi2 as the sum of terms starting 
* 2 bins above the rightmost maximum
   sigma optim=0
*old - why is 6 added? Shouldn't it be 2? - do i=itop+6,(binnb) 
   do i=itop+2,(binnb) 
      sigma optim=optim+chi2([i])
   enddo
* Chi2 per dof
   sigma optim=optim/((binnb)-(itop+1))
*   ve/print gain([j])
   vect/input vchi([j]:[j]) $sigma(optim) 
*   ve/print vchi([j])


   ve/del val 
   ve/del val2 
   ve/del err 
   ve/del chi2
   hi/del 2
   hi/del 3
enddo

* Find the npfit lowest chi2 values to use for a fit to get the best
* gain factor.
ve/cr minchi(npfit) 
do i=1,(npfit)
  ve/inp minchi([i]) 1.
enddo
do i=1,(npfit)
  do j=2,(nbpoints)
    if vchi([j]).lt.vchi(minchi([i])) then
      sigma tst=1
      do k=1,npfit
        if [j].eq.minchi([k]) then
          sigma tst=0
	endif
      enddo
      if tst.eq.1 then
        ve/inp minchi([i]) [j]
      endif
    endif
  enddo
enddo

* Create the vectors to be fitted and fill them
ve/cr vxf(npfit)
ve/cr vyf(npfit)
ve/cr vef(npfit)
do i=1,npfit
   ve/input vxf([i]) $sigma(gain(minchi([i])))
   ve/input vyf([i]) $sigma(vchi(minchi([i])))
enddo

sigma vef=vyf

* Fit the chi2 data to find the minimum and the corresponding 
ve/cr par(3) R
ve/fit vxf vyf vef slb_gain_fit.for ! 3 par

* Now plot up the results of the fits, etc.
opt linx
opt liny
zone 1 2
fortran/file 66 gainfig1.ps
meta 66 -113
nul gainmin $sigma((nbpoints)*(gainstep)+(gainmin)) 0. 10.
set pmci 4
set plci 3
* Plot the chi2 points distribution and the fit result.
GRAPHICS/HPLOT/SYMBOLS gain vchi nbpoints 24
fun/plot slb_gain_fit.for gainmin  (gainmin)+(nbpoints)*(gainstep) s
atitl 'Relative Gain Value' '[h]^2!/n'
set txci 2

text 0.9 8.8  'Zenith run = '//[1] 0.4
text 0.9 7.8  'Gain = '//$sigma(exp(par(3))) 0.4
*text 0.9 7.8  'Gain = '//$sigma(sqrt(par(2)/par(3))) 0.4
*text 0.9 7.8  'Gain = '//$sigma(1+par(3)) 0.4
text 0.9 6.8 'Reference run = '//$HTITLE(1) 0.4

* Now plot the two max3 distributions for the runs.
set txci 1
opt logy
opt logx
cd //lun2
set hcol 4
h/plot 1
cd //lun1
1d 2 'Calibrate' binnb p2min p2max 
nt/proj 2  ntplid.(varr) (weigh)
hi/op/add 2 2 2 $sigma(tdur) 0. E
set hcol 2
h/plot 2 s
atitl 'Second brightest pixel value (red=current, blue=reference)' 'Event rate per bin (Hz)'
close 66
close 1
close 2

* Clean up the fiddly bits.
ve/del GAIN
ve/del VCHI
ve/del VCHIER
ve/del VAL1
ve/del TDEB
ve/del TEND
ve/del TDUR

hi/del 2
hi/del 1






